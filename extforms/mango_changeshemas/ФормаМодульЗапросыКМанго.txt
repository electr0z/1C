&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПолучитьЛинииНаСервере();
	ПолучитьСхемыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЛинии(Команда)
	ПолучитьЛинииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьЛинииНаСервере()
	ТаблицаИспользуемыхЛиний.Загрузить(ТаблицаВходящихЛиний()); 
	ТаблицаИспользуемыхЛиний.Сортировать("ЧислоСортировки Возр");
КонецПроцедуры

&НаСервере
Функция ТаблицаВсехСхем()
	
	json = СериализоватьВJSON(Новый Соответствие);
	СтруктураОтвета = ВыполнитьЗапросКМанго(JSON, "/schemas");
	
	ТаблицаВозврата = Новый ТаблицаЗначений();
	ТаблицаВозврата.Колонки.Добавить("schema_id",Новый ОписаниеТипов("Число", , ,Новый КвалификаторыЧисла(100)));
	ТаблицаВозврата.Колонки.Добавить("name",Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));


	
	Если СтруктураОтвета.code = 200 Тогда
		МассивВсехСхем = СтруктураОтвета.data.data;
		Для Каждого Элемент из МассивВсехСхем Цикл
			СтрокаТаблицы = ТаблицаВозврата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Элемент);			
		КонецЦикла;
	КонецЕсли;
	Возврат ТаблицаВозврата;		
КонецФункции


&НаСервере
Функция ТаблицаВходящихЛиний()
	
	json = СериализоватьВJSON(Новый Соответствие);
	СтруктураОтвета = ВыполнитьЗапросКМанго(JSON, "/incominglines");
	
	ТаблицаВозврата = Новый ТаблицаЗначений();
	ТаблицаВозврата.Колонки.Добавить("line_id",Новый ОписаниеТипов("Число", , ,Новый КвалификаторыЧисла(100)));
	ТаблицаВозврата.Колонки.Добавить("number",Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	ТаблицаВозврата.Колонки.Добавить("name",Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	ТаблицаВозврата.Колонки.Добавить("comment",Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	ТаблицаВозврата.Колонки.Добавить("region",Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	ТаблицаВозврата.Колонки.Добавить("schema_id",Новый ОписаниеТипов("Число", , ,Новый КвалификаторыЧисла(100)));
	ТаблицаВозврата.Колонки.Добавить("schema_name",Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100)));
	ТаблицаВозврата.Колонки.Добавить("ЧислоСортировки",Новый ОписаниеТипов("Число", , ,Новый КвалификаторыЧисла(100)));


	
	Если СтруктураОтвета.code = 200 Тогда
		МассивВходящихЛиний = СтруктураОтвета.data.lines;
		Для Каждого Элемент из МассивВходящихЛиний Цикл
			НаименованиеОбъекта = Элемент.comment;
			Если ВРег(СокрЛП(Лев(НаименованиеОбъекта,2))) = "ТМ" Тогда
				
				СтрокаТаблицы = ТаблицаВозврата.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Элемент);
				СтрокаТаблицы.ЧислоСортировки = Число(СтрЗаменить(НаименованиеОбъекта,"ТМ",""));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаВозврата;
		
КонецФункции

&НаСервере
Функция ВыполнитьЗапросКМанго(JSON, Команда)
	НастройкиМанго = Новый Структура("URL, API_KEY, API_SALT","app.mango-office.ru/vpbx", "Указать api key", "Указать api salt");
	sign = SignMango(НастройкиМанго.API_KEY, JSON, НастройкиМанго.API_SALT);
	
	ПараметрыТела = Новый Массив;
	ПараметрыТела.Добавить("vpbx_api_key=" + НастройкиМанго.API_KEY);
	ПараметрыТела.Добавить("sign=" + sign);
	ПараметрыТела.Добавить(КодироватьСтроку("json=" + json, СпособКодированияСтроки.URLВКодировкеURL));
	
	URL = НастройкиМанго.URL + Команда;
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);

	


	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPЗапрос.УстановитьТелоИзСтроки(сфпСтрСоединить(ПараметрыТела, "&"),
		КодировкаТекста.UTF8,
		ИспользованиеByteOrderMark.НеИспользовать
	);
	
	HTTPСоединение = Новый HTTPСоединение(
		СтруктураURI.Хост,
		СтруктураURI.Порт,,,,,
		Новый ЗащищенноеСоединениеOpenSSL);
	
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	Попытка
		СтруктураИзОтвета = ДесериализоватьИзJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
	Исключение
		СтруктураИзОтвета = Новый Структура;
	КонецПопытки;
	
	УспешноеВыполнение = ?(HTTPОтвет.КодСостояния = 200, Истина, Ложь);
	
	Возврат Новый Структура("done, code, data", УспешноеВыполнение, HTTPОтвет.КодСостояния, СтруктураИзОтвета);
	
	
КонецФункции



// Сериализует объект в строку JSON
// 
// Параметры:
// 	ОбъектСериализации - Произвольный - Объект требующий сериализации
// Возвращаемое значение:
// 	Строка - Полученная в результате сериализации строка JSON
&НаСервере
Функция СериализоватьВJSON(ОбъектСериализации, Знач ВариантЗаписиДаты = Неопределено) Экспорт

	Перем НастройкиСериализацииJSON;
	
	ВариантЗаписиДаты = ?(ВариантЗаписиДаты = Неопределено, ВариантЗаписиДатыJSON.ЛокальнаяДата, ВариантЗаписиДаты);
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДаты;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, ОбъектСериализации, НастройкиСериализацииJSON);
	
	Возврат ЗаписьJSON.Закрыть(); 

КонецФункции
 

// Десериализует строку JSON
// 
// Параметры:
// 	СтрокаJSON - Строка - Десериализуемая строка JSON 
// 	ИспользуяСериализатор - Булево - Используется если строка JSON приходит без описания типов 
// 		(например из стороннего сервиса)
// 		
// Возвращаемое значение:
// 	Структура, Массив, ФиксированнаяСтруктура - Объект полученный из строки JSON
&НаСервере
Функция ДесериализоватьИзJSON(СтрокаJSON, ИменаПолейДат = "") Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON); 

	ОбъектИзСтрокиJSON = ПрочитатьJSON(ЧтениеJSON,,ИменаПолейДат, ФорматДатыJSON.ISO); 

	ЧтениеJSON.Закрыть();
	
	Возврат ОбъектИзСтрокиJSON; 
	
КонецФункции

&НаСервере
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = СтрНайти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = СтрНайти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = СтрНайти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = СтрНайти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = СтрНайти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
		Если Не ТолькоЦифрыВСтроке(Порт) Тогда
			Порт = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТолькоЦифрыВСтроке(Знач Значение, Знач Устаревший = Истина, Знач ПробелыЗапрещены = Истина) Экспорт
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПробелыЗапрещены Тогда
		Значение = СтрЗаменить(Значение, " ", "");
	КонецЕсли;
		
	Если СтрДлина(Значение) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка.
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
	Возврат СтрДлина(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
			Значение, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
	
КонецФункции

&НаСервере
Функция SignMango(Параметр1, Параметр2, Параметр3, Параметр4 = Неопределено)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	

	ХешированиеДанных.Добавить(Параметр1);
	ХешированиеДанных.Добавить(Параметр2);
	ХешированиеДанных.Добавить(Параметр3);
	
	Если Параметр4 <> Неопределено Тогда 
		ХешированиеДанных.Добавить(Параметр4);
	КонецЕсли;

		
	Возврат НРег(СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", ""));

КонецФункции

Функция сфпСтрСоединить(Строки, Разделитель = Неопределено) Экспорт
	
	СтрРезультат = "";
	СтрРазделитель = ?(Разделитель = Неопределено, "", Разделитель); 
	
	Для Каждого ТекСтрока Из Строки Цикл
		СтрРезультат = СтрРезультат + ?(СтрРезультат = "", "", СтрРазделитель) + ТекСтрока;	
	КонецЦикла;	
	
	Возврат СтрРезультат;
	
КонецФункции


&НаСервере
Процедура ПолучитьСхемыНаСервере()
	ТаблицаВсехСхем.Загрузить(ТаблицаВсехСхем());
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьСхемы(Команда)
	ПолучитьСхемыНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаИспользуемыхЛинийschema_nameНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НаименованиеОбъекта = Элементы.ТаблицаИспользуемыхЛиний.ТекущиеДанные.comment;
	Элементы.ТаблицаИспользуемыхЛинийschema_name.СписокВыбора.Очистить();
	Для Каждого стр из ТаблицаВсехСхем Цикл
		Если СокрЛП(НаименованиеОбъекта) = СокрЛП(Лев(стр.name, 4)) Тогда
			Элементы.ТаблицаИспользуемыхЛинийschema_name.СписокВыбора.Добавить(стр.schema_id, стр.name);
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИспользуемыхЛинийschema_nameОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Элементы.ТаблицаИспользуемыхЛиний.ТекущиеДанные.schema_id <> ВыбранноеЗначение Тогда
		Элементы.ТаблицаИспользуемыхЛиний.ТекущиеДанные.schema_id = ВыбранноеЗначение;
		СтрокиТаблицыВсехСхем = ТаблицаВсехСхем.НайтиСтроки(Новый Структура("schema_id", ВыбранноеЗначение)); 
		Элементы.ТаблицаИспользуемыхЛиний.ТекущиеДанные.schema_name = СтрокиТаблицыВсехСхем[0].name;
		Если НЕ Элементы.ТаблицаИспользуемыхЛиний.ТекущиеДанные.былоизменение Тогда
			Элементы.ТаблицаИспользуемыхЛиний.ТекущиеДанные.былоизменение = ИСТИНА;
		КонецЕсли;
	КонецЕсли;
	
	
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВсеЛинииНаРезер(Команда)
	ВсеЛинииНаРезерНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВсеЛинииНаРезерНаСервере()
	Для Каждого стр из ТаблицаИспользуемыхЛиний Цикл
		НаименованиеОбъекта = стр.comment;
		Если ВРег(СокрЛП(Лев(НаименованиеОбъекта,2))) = "ТМ" Тогда         //ТМ это префикс ресторан
			Для Каждого строкасхемы из ТаблицаВсехСхем Цикл
				Если СокрЛП(НаименованиеОбъекта) = СокрЛП(Лев(строкасхемы.name, 4)) Тогда
					ПозицияСлова = СтрНайти(строкасхемы.name,"Резерв");	
					Если ПозицияСлова <> 0 Тогда
						стр.schema_id = строкасхемы.schema_id;
						стр.schema_name = строкасхемы.name;
						стр.былоизменение = ИСТИНА;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВсеЛинииНаОсновнуюСхему(Команда)
	ВсеЛинииНаОсновнуюСхемуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВсеЛинииНаОсновнуюСхемуНаСервере()
	Для Каждого стр из ТаблицаИспользуемыхЛиний Цикл
		НаименованиеОбъекта = стр.comment;
		Если ВРег(СокрЛП(Лев(НаименованиеОбъекта,2))) = "ТМ" Тогда
			Для Каждого строкасхемы из ТаблицаВсехСхем Цикл
				Если СокрЛП(НаименованиеОбъекта) = СокрЛП(Лев(строкасхемы.name, 4)) Тогда
					ПозицияСлова = СтрНайти(строкасхемы.name,"Резерв");	
					Если ПозицияСлова = 0 Тогда
						стр.schema_id = строкасхемы.schema_id;
						стр.schema_name = строкасхемы.name;
						стр.былоизменение = ИСТИНА;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзменения(Команда)
	ПрименитьИзмененияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПрименитьИзмененияНаСервере()
	Для Каждого стр из ТаблицаИспользуемыхЛиний Цикл
		Если стр.былоизменение Тогда
			КомандаSetSchemas(стр);
		КонецЕсли;
	КонецЦикла;
	ПолучитьЛинииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КомандаSetSchemas(строка)
	

	Соответствие = Новый Соответствие;
	Соответствие.Вставить("schema_id", строка.schema_id);
	Соответствие.Вставить("line_id", строка.line_id);

	json = СериализоватьВJSON(Соответствие);
	
	СтруктураОтвета = ВыполнитьЗапросКМанго(JSON, "/schema/set")
		
КонецПроцедуры


