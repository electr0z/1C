#Область ПрограммныйИнтерфейс

#Область ПроцедурыРегЗаданий

Процедура ПолучитьОстаткиЕГАИС() Экспорт
	// Очистить старые данные 
	УдалитьСтарыеЗаписиТаблицыИстории(Перечисления.ТоматоЭтапыОбменаЕГАИС.ЗапрошеныДанныеОстатковСклада);
	УдалитьСтарыеЗаписиТаблицыИстории(Перечисления.ТоматоЭтапыОбменаЕГАИС.ФормированиеДокументаПеремещения);
	
	// получаем последние записи за сегодня по обменам с ЕГАИС и вместе с ними УТМ-Организации для которых обмен еще не запускался
	ТаблицаИстории = ТаблицаИсторииОбмена(Перечисления.ТоматоЭтапыОбменаЕГАИС.ЗапрошеныДанныеОстатковСклада);
	ТаблицаИсторииФормирования = ТаблицаИсторииОбмена(Перечисления.ТоматоЭтапыОбменаЕГАИС.ФормированиеДокументаПеремещения);
	
	МассивИдентификаторов = Новый Массив;
	Для каждого СтрокаИстории Из ТаблицаИстории Цикл
		Если ЗначениеЗаполнено(СтрокаИстории.ИдентификаторЗапроса) Тогда
			МассивИдентификаторов.Добавить(СтрокаИстории.ИдентификаторЗапроса);
		КонецЕсли; 
	КонецЦикла; 
	
	ТаблицаДокументовОстатков = ТаблицаДокументовОстатковПоМассивуИдентификаторов(МассивИдентификаторов);
	
	#Если РакНаГореСвистнет Тогда
		ТаблицаДокументовОстатков = Новый ТаблицаЗначений;
	#КонецЕсли
	
	Для каждого СтрокаТаблицы Из ТаблицаИстории Цикл
		// если данные не получали, для каждой из них вызываем получение остатков
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЭтапОбменаЕГАИС) Тогда
			СоздатьЗаписьВИстории(СтрокаТаблицы.Организация, Перечисления.ТоматоЭтапыОбменаЕГАИС.ЗапрошеныДанныеОстатковСклада);
			Документы.ОстаткиЕГАИС.ЗапросПолучениеОстатков(СтрокаТаблицы.УТМ);
		КонецЕсли; 
		// если дождались ответа, делаем документ перемещения и отправляем запрос в ЕГАИС
		ОтборПоИстории = Новый Структура;
		ОтборПоИстории.Вставить("Организация", СтрокаТаблицы.Организация);
		ОтборПоИстории.Вставить("ЭтапОбменаЕГАИС", Перечисления.ТоматоЭтапыОбменаЕГАИС.ФормированиеДокументаПеремещения);
		
		СтрокиИстории = ТаблицаИсторииФормирования.НайтиСтроки(ОтборПоИстории);
		КоличествоСтрокИстории = СтрокиИстории.Количество();
		
		//СтрокаИсторииФормирования = ТаблицаИсторииФормирования.Найти(СтрокаТаблицы.Организация, "Организация");
		//Если СтрокаТаблицы.Выполнен И СтрокаИсторииФормирования = Неопределено Тогда
		Если СтрокаТаблицы.Выполнен И КоличествоСтрокИстории = 0 Тогда
			СоздатьЗаписьВИстории(СтрокаТаблицы.Организация, Перечисления.ТоматоЭтапыОбменаЕГАИС.ФормированиеДокументаПеремещения);			
			НайденнаяСтрокаДокумента = ТаблицаДокументовОстатков.Найти(СтрокаТаблицы.ИдентификаторЗапроса, "ИдентификаторЗапроса");
			Если НайденнаяСтрокаДокумента <> Неопределено Тогда
				Если НайденнаяСтрокаДокумента.ДокументОстатков.ОстаткиПоДаннымЕГАИС.Количество() <> 0 Тогда
					НовыйДокументПеремещения = Документы.ПеремещениеТоваровЕГАИС.СоздатьДокумент();
					НовыйДокументПеремещения.Заполнить(НайденнаяСтрокаДокумента.ДокументОстатков);
					Если НовыйДокументПеремещения.Товары.Количество() > 0 Тогда
						Попытка
							//НовыйДокументПеремещения.ОбменДанными.Загрузка = Истина;
							НовыйДокументПеремещения.Записать(РежимЗаписиДокумента.Проведение);	
						Исключение
							ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							ЗарегистрироватьОшибку(СтрокаТаблицы.Организация, СтрокаТаблицы.ЭтапОбменаЕГАИС, Справочники.ТоматоВидыОшибокОбменаЕГАИС.ПустаяСсылка(), ОписаниеОшибки);
						КонецПопытки;
					Иначе
						ОписаниеОшибки = "пустой документ";	
					КонецЕсли;
					Если НЕ НовыйДокументПеремещения.Ссылка.Пустая() Тогда
						ИнтеграцияЕГАИС.ОтправитьПеремещениеВМагазин(НовыйДокументПеремещения, СтрокаТаблицы.УТМ);
					Иначе	
						ОписаниеОшибки = "Не удалось создать документ перемещения на основании остатков " + НайденнаяСтрокаДокумента.ДокументОстатков;
						ЗарегистрироватьОшибку(СтрокаТаблицы.Организация, СтрокаТаблицы.ЭтапОбменаЕГАИС, Справочники.ТоматоВидыОшибокОбменаЕГАИС.ПустаяСсылка(), ОписаниеОшибки);
						Продолжить;
					КонецЕсли;
				Иначе
					УстановитьВыполнениеЗаписиИстории(СтрокаТаблицы.Организация, Перечисления.ТоматоЭтапыОбменаЕГАИС.ФормированиеДокументаПеремещения);
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	// Проверяем как долго не было ответа от ЕГАИС-а. Если больше 3х часов молчит, значит включить Panic mode
	ТаблицаИсторииЗапрошенныхДанных = ТаблицаИсторииОбмена(Перечисления.ТоматоЭтапыОбменаЕГАИС.ЗапрошеныДанныеОстатковСклада);
	ПроверитьТаблицуИсторииНаДлительныеОперации(ТаблицаИсторииЗапрошенныхДанных);
	
	ТаблицаИсторииФормированияПеремещения = ТаблицаИсторииОбмена(Перечисления.ТоматоЭтапыОбменаЕГАИС.ФормированиеДокументаПеремещения);	
	ПроверитьТаблицуИсторииНаДлительныеОперации(ТаблицаИсторииФормированияПеремещения);

КонецПроцедуры

Процедура СписатьКрепкийАлкогольОбщая() Экспорт

	//УдалитьСтарыеЗаписиКрепкогоАлкоголя();
	
	СписатьКрепкийАлкогольПоЭтапу(Перечисления.ТоматоЭтапыОбменаЕГАИС.ФормированиеСписанияКрепкогоАлкоголяАкт1);
	//СписатьКрепкийАлкогольПоЭтапу(Перечисления.ТоматоЭтапыОбменаЕГАИС.ФормированиеСписанияКрепкогоАлкоголяАкт2);
	
	ПроверитьНаКорректностьДокументыСписанияКрепкогоАлкоголя();

КонецПроцедуры

Процедура СписатьНекрепкийАлкоголь() Экспорт

	Перем КоличествоТоваров;
	
	УдалитьСтарыеЗаписиТаблицыИстории(Перечисления.ТоматоЭтапыОбменаЕГАИС.ЗапрошеныДанныеОстатковТорговогоЗала);
	УдалитьСтарыеЗаписиТаблицыИстории(Перечисления.ТоматоЭтапыОбменаЕГАИС.ФормированиеСписанияНекрепкогоАлкоголя);
	
	// сначала получаем данные остатков в торговом зале.
	ТаблицаОстатковПоПиву		 = ТаблицаОстатковЕГАИСПоПиву();
	
	ТаблицаИсторииЗапросаДанных	 = ТаблицаИсторииОбмена(Перечисления.ТоматоЭтапыОбменаЕГАИС.ЗапрошеныДанныеОстатковТорговогоЗала);
	ТаблицаИсторииФормирования	 = ТаблицаИсторииОбмена(Перечисления.ТоматоЭтапыОбменаЕГАИС.ФормированиеСписанияНекрепкогоАлкоголя);
	
	#Если РакНаГореСвистнет Тогда
		ТаблицаИсторииФормирования = Новый ТаблицаЗначений;
	#КонецЕсли 
	
	МассивИдентификаторов = Новый Массив;
	Для каждого СтрокаИстории Из ТаблицаИсторииЗапросаДанных Цикл
		Если ЗначениеЗаполнено(СтрокаИстории.ИдентификаторЗапроса) Тогда
			МассивИдентификаторов.Добавить(СтрокаИстории.ИдентификаторЗапроса);
		КонецЕсли; 
	КонецЦикла; 
	
	ТаблицаДокументовОстатков = ТаблицаДокументовОстатковПоМассивуИдентификаторов(МассивИдентификаторов);
	
	#Если РакНаГореСвистнет Тогда
		ТаблицаДокументовОстатков = Новый ТаблицаЗначений;
	#КонецЕсли
	
	ТаблицаИсключений = ТаблицаИсключенийЕГАИС();
	
	#Если РакНаГореСвистнет Тогда
		ТаблицаИсключений = Новый ТаблицаЗначений;
	#КонецЕсли
	
	Для каждого СтрокаТаблицы Из ТаблицаИсторииЗапросаДанных Цикл
		// если данные не получали, для каждой из них вызываем получение остатков
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЭтапОбменаЕГАИС) Тогда
			СоздатьЗаписьВИстории(СтрокаТаблицы.Организация, Перечисления.ТоматоЭтапыОбменаЕГАИС.ЗапрошеныДанныеОстатковТорговогоЗала);
			Документы.ОстаткиЕГАИС.ЗапросПолучениеОстатков(СтрокаТаблицы.УТМ, Истина);
		КонецЕсли; 
		
		ОтборПоИстории = Новый Структура;
		ОтборПоИстории.Вставить("Организация", СтрокаТаблицы.Организация);
		ОтборПоИстории.Вставить("ЭтапОбменаЕГАИС", Перечисления.ТоматоЭтапыОбменаЕГАИС.ФормированиеСписанияНекрепкогоАлкоголя);
		
		СтрокиИстории = ТаблицаИсторииФормирования.НайтиСтроки(ОтборПоИстории);
		КоличествоСтрокИстории = СтрокиИстории.Количество();
		
		//СтрокаИсторииФормирования = ТаблицаИсторииФормирования.Найти(СтрокаТаблицы.Организация, "Организация");
		//Если СтрокаТаблицы.Выполнен И СтрокаИсторииФормирования = Неопределено Тогда
		Если СтрокаТаблицы.Выполнен И КоличествоСтрокИстории = 0 Тогда		
			СоздатьЗаписьВИстории(СтрокаТаблицы.Организация, Перечисления.ТоматоЭтапыОбменаЕГАИС.ФормированиеСписанияНекрепкогоАлкоголя);
			СсылкаНаНовыйДокумент = ДокументСписанияНекрепкогоАлкоголя(СтрокаТаблицы, ТаблицаОстатковПоПиву, КоличествоТоваров, ТаблицаИсключений);
			
			Если КоличествоТоваров <> 0 Тогда
				ОбъектДокументаСписания = СсылкаНаНовыйДокумент.ПолучитьОбъект();
				СообщениеОбОшибке = "";
				ИнтеграцияЕГАИС.ОтправитьАктСписания(ОбъектДокументаСписания, СтрокаТаблицы.УТМ, СообщениеОбОшибке);
				Если СообщениеОбОшибке = "" Тогда
					ДополнитьЗаписьИсторииИДЗапроса(СтрокаТаблицы.Организация, Перечисления.ТоматоЭтапыОбменаЕГАИС.ФормированиеСписанияНекрепкогоАлкоголя, ОбъектДокументаСписания.ИдентификаторЗапроса);
				Иначе	
					ЗарегистрироватьОшибку(СтрокаТаблицы.Организация, СтрокаТаблицы.ЭтапОбменаЕГАИС, Справочники.ТоматоВидыОшибокОбменаЕГАИС.ПустаяСсылка(), СообщениеОбОшибке);
				КонецЕсли; 
			Иначе
				УстановитьВыполнениеЗаписиИстории(СтрокаТаблицы.Организация, Перечисления.ТоматоЭтапыОбменаЕГАИС.ФормированиеСписанияНекрепкогоАлкоголя);	
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаИсторииЗапрошенныхДанных = ТаблицаИсторииОбмена(Перечисления.ТоматоЭтапыОбменаЕГАИС.ЗапрошеныДанныеОстатковТорговогоЗала);
	ПроверитьТаблицуИсторииНаДлительныеОперации(ТаблицаИсторииЗапрошенныхДанных);
	
	ТаблицаИсторииФормированияСписания = ТаблицаИсторииОбмена(Перечисления.ТоматоЭтапыОбменаЕГАИС.ФормированиеСписанияНекрепкогоАлкоголя);
	ПроверитьТаблицуИсторииНаДлительныеОперации(ТаблицаИсторииФормированияСписания);
	
	
КонецПроцедуры

Процедура ЗагрузитьСправкиФормы1() Экспорт

	ЗагрузитьСправкиПоФорме1ЗаПериод();

КонецПроцедуры

#КонецОбласти  

#Область РаботаСРегистрамиСведений

Процедура ДополнитьЗаписьИсторииИДЗапроса(Знач Организация, Знач Этап, Знач ИДЗапроса) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.Период,
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.Организация,
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.ЭтапОбменаЕГАИС,
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.Выполнен
	|ИЗ
	|	РегистрСведений.ТоматоИсторияОбменаЕГАИС.СрезПоследних(
	|			&ТекущаяДата,
	|			Организация = &Организация
	|				И ЭтапОбменаЕГАИС = &Этап) КАК ТоматоИсторияОбменаЕГАИССрезПоследних";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Этап", Этап);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаписьРС = РегистрыСведений.ТоматоИсторияОбменаЕГАИС.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьРС, ВыборкаДетальныеЗаписи);
		ЗаписьРС.ИдентификаторЗапроса = ИДЗапроса;
		ЗаписьРС.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьВыполнениеЗаписиИстории(Знач Организация, Знач Этап, Знач Выполнен = Истина) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.Период,
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.Организация,
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.ЭтапОбменаЕГАИС,
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.ИдентификаторЗапроса
	|ИЗ
	|	РегистрСведений.ТоматоИсторияОбменаЕГАИС.СрезПоследних(
	|			&ТекущаяДата,
	|			Организация = &Организация
	|				И ЭтапОбменаЕГАИС = &Этап) КАК ТоматоИсторияОбменаЕГАИССрезПоследних";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Этап", Этап);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаписьРС = РегистрыСведений.ТоматоИсторияОбменаЕГАИС.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьРС, ВыборкаДетальныеЗаписи);
		ЗаписьРС.Выполнен = Выполнен;
		ЗаписьРС.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура СоздатьЗаписьВИстории(Знач Организация, Знач ЭтапОбменаЕГАИС, Знач Выполнен = Ложь, Знач ИдентификаторЗапроса = "") Экспорт
	
	ЗаписьВРС						 = РегистрыСведений.ТоматоИсторияОбменаЕГАИС.СоздатьМенеджерЗаписи();
	
	ЗаписьВРС.Период				 = ТекущаяДата();
	ЗаписьВРС.Организация			 = Организация;
	ЗаписьВРС.ЭтапОбменаЕГАИС		 = ЭтапОбменаЕГАИС;
	ЗаписьВРС.Выполнен				 = Выполнен;
	ЗаписьВРС.ИдентификаторЗапроса	 = ИдентификаторЗапроса;
	
	ЗаписьВРС.Записать();
	
КонецПроцедуры
 
Процедура ЗарегистрироватьОшибку(Знач Организация, Знач ЭтапОбмена, Знач ВидОшибки, Знач ОписаниеОшибки) Экспорт

	Если ОписаниеОшибки = "" ИЛИ ОписаниеОшибки = "Не удалось определить формат ответа на запрос." Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьВРС = РегистрыСведений.ТоматоОшибкиОбменаЕГАИС.СоздатьМенеджерЗаписи();
	
	ЗаписьВРС.ДатаРегистрации	 = ТекущаяДата();
	ЗаписьВРС.Организация		 = Организация;
	ЗаписьВРС.ЭтапОбмена		 = ЭтапОбмена;
	ЗаписьВРС.ВидОшибки			 = ВидОшибки;
	ЗаписьВРС.ОписаниеОшибки	 = ОписаниеОшибки;
	
	ЗаписьВРС.Записать();
	
КонецПроцедуры

Процедура ЗаписатьКрепкийАлкоголь(Знач Организация, Знач КлассификаторАП, Знач Марка, Знач ДокументСписания = Неопределено) Экспорт

	Если ДокументСписания = Неопределено Тогда
		ДокументСписания = Документы.СписаниеТоваровЕГАИС.ПустаяСсылка();
	КонецЕсли; 
	
	ЗаписьВРС					 = РегистрыСведений.ТоматоСканированиеКрепкогоАлкоголя.СоздатьМенеджерЗаписи();
	ЗаписьВРС.Организация		 = Организация;
	ЗаписьВРС.Классификатор		 = КлассификаторАП;
	ЗаписьВРС.Марка				 = Марка;
	ЗаписьВРС.ДокументСписания	 = ДокументСписания;
	ЗаписьВРС.ДатаСканирования	 = ТекущаяДата();
	
	ЗаписьВРС.Записать();
	
КонецПроцедуры
 
Процедура УдалитьКрепкийАлкоголь(Знач Организация, Знач КлассификаторАП = Неопределено, Марка = Неопределено) Экспорт

	НаборРС = РегистрыСведений.ТоматоСканированиеКрепкогоАлкоголя.СоздатьНаборЗаписей();
	НаборРС.Отбор.Организация.Установить(Организация, Истина);
	Если КлассификаторАП <> Неопределено Тогда
		НаборРС.Отбор.Классификатор.Установить(КлассификаторАП, Истина);
	КонецЕсли; 
	Если Марка <> Неопределено Тогда
		НаборРС.Отбор.Марка.Установить(Марка, Истина);;	
	КонецЕсли; 
	НаборРС.Прочитать();
	НаборРС.Очистить();
	НаборРС.Записать();
	
КонецПроцедуры

Функция МаркаСчитанаДругойОрганизацей(МаркаВPDF417, ОрганизацияОтвета) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоматоСканированиеКрепкогоАлкоголя.Марка,
		|	ТоматоСканированиеКрепкогоАлкоголя.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.ТоматоСканированиеКрепкогоАлкоголя КАК ТоматоСканированиеКрепкогоАлкоголя
		|ГДЕ
		|	ТоматоСканированиеКрепкогоАлкоголя.Марка = &Марка";
	
	Запрос.УстановитьПараметр("Марка", МаркаВPDF417);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	Если РезультатЗапроса.Пустой() Тогда
		ОрганизацияОтвета = Справочники.Организации.ПустаяСсылка();
		Возврат Ложь;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		ОрганизацияОтвета = ВыборкаДетальныеЗаписи.Организация;
		Возврат Истина;
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


КонецФункции // МаркаУжеСчитанаДругойОрганизацей()

Функция ЭтапОбменаПоИдентификаторуЗапроса(Организация, ИдентификаторЗапроса) Экспорт
	
	Перем ЭтапОбмена;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.ЭтапОбменаЕГАИС КАК ЭтапОбменаЕГАИС
	|ИЗ
	|	РегистрСведений.ТоматоИсторияОбменаЕГАИС.СрезПоследних КАК ТоматоИсторияОбменаЕГАИССрезПоследних
	|ГДЕ
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.ИдентификаторЗапроса = &ИдентификаторЗапроса
	|	И ТоматоИсторияОбменаЕГАИССрезПоследних.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.ЭтапОбменаЕГАИС";
	
	Запрос.УстановитьПараметр("ИдентификаторЗапроса", ИдентификаторЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЭтапОбмена = ВыборкаДетальныеЗаписи.ЭтапОбменаЕГАИС;
	Иначе
		ЭтапОбмена = Перечисления.ТоматоЭтапыОбменаЕГАИС.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ЭтапОбмена;
	
КонецФункции

#КонецОбласти  

#Область СлужебныеПроцедурыИФункцииПрограммногоИнтерфейса

Процедура ОтправитьСообщенияОбОшибках() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК Адрес,
	|	ТоматоВидыОшибокОбменаЕГАИСПолучателиРассылки.Ссылка КАК ВидОшибки,
	|	ТоматоВидыОшибокОбменаЕГАИСПолучателиРассылки.Получатель КАК ПолучателиРассылки
	|ИЗ
	|	Справочник.ТоматоВидыОшибокОбменаЕГАИС.ПолучателиРассылки КАК ТоматоВидыОшибокОбменаЕГАИСПолучателиРассылки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ТоматоВидыОшибокОбменаЕГАИСПолучателиРассылки.Получатель = КонтактнаяИнформация.Объект
	|ГДЕ
	|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыРабочий)";
	
	ТаблицаАдресовВидовОшибок = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоматоОшибкиОбменаЕГАИС.ДатаРегистрации КАК ДатаРегистрации,
	|	ТоматоОшибкиОбменаЕГАИС.Организация КАК Организация,
	|	ТоматоОшибкиОбменаЕГАИС.ЭтапОбмена КАК ЭтапОбмена,
	|	ТоматоОшибкиОбменаЕГАИС.ВидОшибки КАК ВидОшибки,
	|	ТоматоОшибкиОбменаЕГАИС.ОписаниеОшибки КАК ОписаниеОшибки
	|ИЗ
	|	РегистрСведений.ТоматоОшибкиОбменаЕГАИС КАК ТоматоОшибкиОбменаЕГАИС
	|ГДЕ
	|	НЕ ТоматоОшибкиОбменаЕГАИС.Отправлена
	|ИТОГИ ПО
	|	ВидОшибки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоВидуОшибок = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоВидуОшибок.Следующий() Цикл
		ТекстПисьма = "";
		РабочаяБаза = ТоматоСерв.РабочаяБаза();
		
		ВыборкаДетальныеЗаписи = ВыборкаПоВидуОшибок.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ТекстПисьма = ТекстПисьма + "Обнаружена ошибка по: " + ВыборкаДетальныеЗаписи.Организация + " на этапе: " + ВыборкаДетальныеЗаписи.ЭтапОбмена;
			ТекстПисьма = ТекстПисьма + "<p>Описание ошибки: " + ВыборкаДетальныеЗаписи.ОписаниеОшибки + "</p>";
			
		КонецЦикла;
		
		Сообщение = Новый Структура;
		Сообщение.Вставить("Тема", ?(РабочаяБаза, ВыборкаПоВидуОшибок.ВидОшибки.ТемаСообщения, "Ошибки тестовой базы Рарус"));
		Сообщение.Вставить("ИмяОтправителя","Tomato Рарус");
		Сообщение.Вставить("СводнаяТаблица",ТекстПисьма);	
		
		Получатели = Новый Массив;
		Если РабочаяБаза Тогда
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ВидОшибки", ВыборкаПоВидуОшибок.ВидОшибки);
			
			СтрокиТаблицыРассылки = ТаблицаАдресовВидовОшибок.НайтиСтроки(СтруктураОтбора);
			
			Для каждого СтрокаПолучателей Из СтрокиТаблицыРассылки Цикл
				Получатели.Добавить(СтрокаПолучателей.Адрес);
			КонецЦикла; 
			
		Иначе
			Получатели.Добавить("hanav@tomato-pizza.ru");	
		КонецЕсли;
		Если Получатели.Количество() = 0 Тогда
			Получатели.Добавить("hanav@tomato-pizza.ru");
		КонецЕсли; 
		Сообщение.Вставить("МассивПолучателей",Получатели);     	
		
		РезультатОтправки = ТоматоСерв.ОтправитьПочту(Сообщение);
		Если РезультатОтправки Тогда
			ВыборкаДетальныеЗаписи.Сбросить();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				УстановитьПризнакОтправкиОшибки(ВыборкаДетальныеЗаписи)				
			КонецЦикла;
		КонецЕсли; 	
		
	КонецЦикла;
КонецПроцедуры

Функция СписокОрганизацийЕГАИСПоОрганизации(Знач Организация) Экспорт

	СписокОрганизацийЕГАИС = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС
		|ИЗ
		|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТранспортныеМодулиЕГАИС КАК ТранспортныеМодулиЕГАИС
		|		ПО КлассификаторОрганизацийЕГАИС.Код = ТранспортныеМодулиЕГАИС.ИдентификаторФСРАР
		|ГДЕ
		|	ТранспортныеМодулиЕГАИС.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокОрганизацийЕГАИС.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ОрганизацияЕГАИС"));
	
	Возврат СписокОрганизацийЕГАИС;

КонецФункции // ОрганизацияЕГАИСПоОрганизации()

Функция РесторанВключенВАвтоЕГАИС(Знач Организация) Экспорт

	Перем АвтоЕГАИСВключен;
	
	АвтоЕГАИСДляВсехРесторанов = Константы.ТоматоИспользоватьАвтоЕГАИСДляВсехРесторанов.Получить();
	
	Если АвтоЕГАИСДляВсехРесторанов Тогда
		АвтоЕГАИСВключен = Истина;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоматоОрганизацииАвтоЕГАИСа.Организация
		|ИЗ
		|	РегистрСведений.ТоматоОрганизацииАвтоЕГАИСа КАК ТоматоОрганизацииАвтоЕГАИСа
		|ГДЕ
		|	ТоматоОрганизацииАвтоЕГАИСа.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		АвтоЕГАИСВключен = НЕ РезультатЗапроса.Пустой();
		
	КонецЕсли; 

	Возврат АвтоЕГАИСВключен;

КонецФункции // РесторанВключенВАвтоЕГАИС()()


Процедура ОткрытьФормуРаботыСМарками() Экспорт
#Если Клиент Тогда
	ОткрытьФорму("Обработка.РаботаСМарками.Форма.Форма");	
#КонецЕсли 
КонецПроцедуры

 

#КонецОбласти  

#КонецОбласти  
 
#Область СлужебныеПроцедурыИФункции
Процедура ОтправитьОшибкуВТелеграм(МассивУТМ)Экспорт
	МассивПолучателей = Новый Массив;
	СтруктураПолучателя = Новый Структура("id", "-665205727");
	МассивПолучателей.Добавить(СтруктураПолучателя);
	
	Сообщение = "Зависли УТМ: "; 
	Для Каждого УТМ из МассивУТМ Цикл
		СтрокаПорт = Строка(Формат(УТМ.ПортСервера,"ЧГ=0"));		
		Сообщение = Сообщение + УТМ.Наименование + " | " + УТМ.АдресСервера + ":" + СтрокаПорт + Символы.ПС;	
	КонецЦикла;
	СтруктураПараметров = Новый Структура("recipients, message", МассивПолучателей, Сообщение);
	
	СтрокаТелаJSON = тм_ОбменСВнешнимиСистемами.СериализоватьВJSON(СтруктураПараметров);
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);
	СоединениеСERP = Новый HTTPСоединение("wh.tomato-pizza.ru", 443, , , , 100, ssl);
	
	Попытка
		
		ЗапросХТТП = Новый HTTPЗапрос("/webhook/hs/tomatohook/TelegramSendToUser");
		
		ЗапросХТТП.Заголовки.Вставить("token", "6b852788-cc29-430f-94c8-bf45852b08c4");
		ЗапросХТТП.Заголовки.Вставить("Content-Type", "application/json");
		ЗапросХТТП.УстановитьТелоИзСтроки(СтрокаТелаJSON, КодировкаТекста.UTF8);
		
		РезультатЗапроса = СоединениеСERP.ОтправитьДляОбработки(ЗапросХТТП);
		
	Исключение
		
	КонецПопытки;
	
	
	
КонецПроцедуры

Процедура ФоновоеЗаданиеОбращенияКУТМ(ВыборкаТМ)Экспорт
	
	//Загружаем ТТН вначале - CIV ++
	ТоматоСерв.ПолучениеТТН(ВыборкаТМ.Ссылка);
	ТаблицаЗапросов = ИнтеграцияЕГАИС.ПолучитьСписокЗапросов(ВыборкаТМ.Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапросов.Идентификатор,
	|	ТаблицаЗапросов.АдресЗапроса,
	|	ТаблицаЗапросов.АдресОтвета
	|ПОМЕСТИТЬ ВТ_ТаблицаЗапросов
	|ИЗ
	|	&ТаблицаЗапросов КАК ТаблицаЗапросов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаЗапросов.Идентификатор,
	|	ВТ_ТаблицаЗапросов.АдресЗапроса,
	|	ВТ_ТаблицаЗапросов.АдресОтвета,
	|	ЗапросыЕГАИС.Объект КАК Объект,
	|	ЗапросыЕГАИС.ТипЗапроса,
	|	ЗапросыЕГАИС.ДатаЗапроса КАК ДатаЗапроса
	|ИЗ
	|	ВТ_ТаблицаЗапросов КАК ВТ_ТаблицаЗапросов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗапросыЕГАИС КАК ЗапросыЕГАИС
	|		ПО ВТ_ТаблицаЗапросов.Идентификатор = ЗапросыЕГАИС.Идентификатор
	|ГДЕ
	|	(ЗапросыЕГАИС.ТипЗапроса ЕСТЬ NULL 
	|			ИЛИ ЗапросыЕГАИС.ТранспортныйМодуль = &ТранспортныйМодуль
	|				И ЗапросыЕГАИС.ДатаОтвета = ДАТАВРЕМЯ(1, 1, 1))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗапроса";
	
	
	Запрос.УстановитьПараметр("ТаблицаЗапросов", ТаблицаЗапросов);
	Запрос.УстановитьПараметр("ТранспортныйМодуль", ВыборкаТМ.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОчередьОтветов = Новый ТаблицаЗначений;
	ОчередьОтветов.Колонки.Добавить("ПорядокПП", Новый ОписаниеТипов("Число"));
	ОчередьОтветов.Колонки.Добавить("Значение");
	ОчередьОтветов.Колонки.Добавить("ВыбОбъект");
	ОчередьОтветов.Колонки.Добавить("ВыбИдентификатор");
	ОчередьОтветов.Колонки.Добавить("ВыбТипЗапроса");
	ОчередьОтветов.Колонки.Добавить("СтруктураЗапроса");
	ОчередьОтветов.Колонки.Добавить("СтруктураОтвета");
	
	Пока Выборка.Следующий() Цикл
		
		
		Если ПустаяСтрока(Выборка.АдресОтвета) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураЗапроса = ОбщегоНазначенияКлиентСервер.СтруктураURI(Выборка.АдресЗапроса);
		СтруктураОтвета = ОбщегоНазначенияКлиентСервер.СтруктураURI(Выборка.АдресОтвета);
		
		РезультатВыполненияЗапроса = Неопределено;
		ПолучениеДанныхИзТранспортногоМодуля(ВыборкаТМ.Ссылка, СтруктураОтвета.ПутьНаСервере, РезультатВыполненияЗапроса);
		
		Если НЕ РезультатВыполненияЗапроса.Результат Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ЕГАИС.Получение ответа на запрос'"), УровеньЖурналаРегистрации.Ошибка,,, РезультатВыполненияЗапроса.ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		//Формируем очередь по порядку - 
		НСтрокаОчереди = ОчередьОтветов.Добавить();
		НСтрокаОчереди.Значение 		= РезультатВыполненияЗапроса;
		НСтрокаОчереди.ВыбОбъект 		= Выборка.Объект;
		НСтрокаОчереди.ВыбИдентификатор = Выборка.Идентификатор;
		НСтрокаОчереди.ВыбТипЗапроса 	= Выборка.ТипЗапроса;
		НСтрокаОчереди.СтруктураЗапроса = СтруктураЗапроса;
		НСтрокаОчереди.СтруктураОтвета 	= СтруктураОтвета;
		
		//определим порядок
		ОтветМодуляЕГАИС   = РезультатВыполненияЗапроса.ОтветМодуляЕГАИС;
		ТранспортныйМодуль = РезультатВыполненияЗапроса.ТранспортныйМодуль;
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ОтветМодуляЕГАИС);
		
		Попытка
			//ОтветXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип(Справочники.ВидыОбъектовЕГАИС.ДокументыЕГАИС.ПространствоИмен, "Documents"));
			ОтветXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ИнтеграцияЕГАИС.ОбъектXDTOПоИмениСвойства(Справочники.ВидыОбъектовЕГАИС.ДокументыЕГАИС.ПространствоИмен, "Documents").Тип());
		Исключение
			ОтветXDTO = Неопределено;
			НСтрокаОчереди.ПорядокПП = 3;		
		КонецПопытки;
		Если ОтветXDTO <> Неопределено Тогда
			Если ОтветXDTO.Document.Ticket <> Неопределено Тогда
				
				Если ОтветXDTO.Document.Ticket.Result <> Неопределено Тогда
					НСтрокаОчереди.ПорядокПП = 1;		
				ИначеЕсли ОтветXDTO.Document.Ticket.OperationResult <> Неопределено Тогда
					НСтрокаОчереди.ПорядокПП = 2;		
				Иначе
					НСтрокаОчереди.ПорядокПП = 3;		
				КонецЕсли;
				
			Иначе
				
				НСтрокаОчереди.ПорядокПП = 3;		
				
			КонецЕсли;			
		КонецЕсли;
		
	КонецЦикла;
	
	ОчередьОтветов.Сортировать("ПорядокПП");
	
	Для каждого ЭлОчереди Из ОчередьОтветов Цикл 
		
		РезультатВыполненияЗапроса = ЭлОчереди.Значение;
		ВыбОбъект 			= ЭлОчереди.ВыбОбъект;
		ВыбИдентификатор 	= ЭлОчереди.ВыбИдентификатор;
		ВыбТипЗапроса 		= ЭлОчереди.ВыбТипЗапроса;
		
		РезультатОбработкиОтвета = Неопределено;
		
		ОбъектЗапроса = ВыбОбъект;
		Если НЕ ЗначениеЗаполнено(ОбъектЗапроса) Тогда
			ОбъектЗапроса = ИнтеграцияЕГАИС.ПолучитьТТНПоИдентификаторуЗапроса(ВыбИдентификатор);
		КонецЕсли;
		ИнтеграцияЕГАИС.ОбработатьОтветСервера(РезультатВыполненияЗапроса, РезультатОбработкиОтвета, ОбъектЗапроса);
		
		Если НЕ РезультатОбработкиОтвета.Результат Тогда
			Если ЗначениеЗаполнено(РезультатОбработкиОтвета.ОписаниеОшибки) Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru = 'ЕГАИС.Обработка ответа на запрос'"), УровеньЖурналаРегистрации.Ошибка,,, РезультатОбработкиОтвета.ОписаниеОшибки);
				//++ 2018-09-19 |  Хан Алексей Вячеславович | Задача ITIL № БФ-00139
				ТекстСообщения = РезультатОбработкиОтвета.ОписаниеОшибки;
				//ТоматоРегламентЕГАИС.ЗарегистрироватьОшибку(ОбъектЗапроса.Организация, Перечисления.ТоматоЭтапыОбменаЕГАИС.ПустаяСсылка(), Справочники.ТоматоВидыОшибокОбменаЕГАИС.ПустаяСсылка(), ТекстСообщения);
				ТоматоРегламентЕГАИС.ЗарегистрироватьОшибку(Справочники.Организации.ПустаяСсылка(), Перечисления.ТоматоЭтапыОбменаЕГАИС.ПустаяСсылка(), Справочники.ТоматоВидыОшибокОбменаЕГАИС.ПустаяСсылка(), ТекстСообщения);
				//-- 2018-09-19 | 
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		//++ 2018-09-19 |  Хан Алексей Вячеславович | Задача ITIL № БФ-00139
		Если ТипЗнч(ОбъектЗапроса) = Тип("ДокументОбъект.ОстаткиЕГАИС") Тогда
			ОбъектЗапроса.ИдентификаторЗапроса = Выборка.Идентификатор;
			Попытка
				ОбъектЗапроса.Записать();
			Исключение
				ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ТоматоРегламентЕГАИС.ЗарегистрироватьОшибку(Справочники.Организации.ПустаяСсылка(), Перечисления.ТоматоЭтапыОбменаЕГАИС.ПустаяСсылка(), Справочники.ТоматоВидыОшибокОбменаЕГАИС.ПустаяСсылка(), ТекстСообщения);
			КонецПопытки
		КонецЕсли;
		//-- 2018-09-19 |  
		
		Если ПустаяСтрока(РезультатОбработкиОтвета.ОписаниеОшибки) Тогда
			Если Не ВыборкаТМ.НеУдалятьОтветыИзУТМ Тогда
				РегистрыСведений.ЗапросыЕГАИС.УдалитьЗапрос(ВыбИдентификатор);
			КонецЕсли;
		Иначе
			Если ВыбТипЗапроса = Справочники.ВидыОбъектовЕГАИС.WayBillAct ИЛИ ВыбТипЗапроса = Справочники.ВидыОбъектовЕГАИС.WayBill Тогда
				ИнтеграцияЕГАИС.ИзменитьСтатусТТНПриОшибке(ВыбИдентификатор);
			ИначеЕсли ВыбТипЗапроса = Справочники.ВидыОбъектовЕГАИС.WayBillAct_v2 ИЛИ ВыбТипЗапроса = Справочники.ВидыОбъектовЕГАИС.WayBill_v2 Тогда
				ИнтеграцияЕГАИС.ИзменитьСтатусТТНПриОшибке(ВыбИдентификатор);
			ИначеЕсли ВыбТипЗапроса = Справочники.ВидыОбъектовЕГАИС.WayBillAct_v3 ИЛИ ВыбТипЗапроса = Справочники.ВидыОбъектовЕГАИС.WayBill_v3 Тогда
				ИнтеграцияЕГАИС.ИзменитьСтатусТТНПриОшибке(ВыбИдентификатор);
			ИначеЕсли ВыбТипЗапроса = Справочники.ВидыОбъектовЕГАИС.WayBillAct_v4 ИЛИ ВыбТипЗапроса = Справочники.ВидыОбъектовЕГАИС.WayBill_v4 Тогда
				ИнтеграцияЕГАИС.ИзменитьСтатусТТНПриОшибке(ВыбИдентификатор);
			ИначеЕсли ВыбТипЗапроса = Справочники.ВидыОбъектовЕГАИС.ActChargeOn Тогда
				ИнтеграцияЕГАИС.ИзменитьСтатусАктаПостановкиПриОшибке(ВыбОбъект);
			КонецЕсли;
			РегистрыСведений.ЗапросыЕГАИС.ЗаписатьОтветИзЕГАИС(ВыбИдентификатор, РезультатОбработкиОтвета.ДатаОтвета, РезультатОбработкиОтвета.ОписаниеОшибки);
		КонецЕсли;
		Если Не ВыборкаТМ.НеУдалятьОтветыИзУТМ Тогда
			УдалениеДанныхИзТранспортногоМодуля(ВыборкаТМ.Ссылка, ЭлОчереди.СтруктураОтвета.ПутьНаСервере);
			УдалениеДанныхИзТранспортногоМодуля(ВыборкаТМ.Ссылка, ЭлОчереди.СтруктураЗапроса.ПутьНаСервере);
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура СписатьКрепкийАлкогольПоЭтапу(ЭтапВыполнения)

	УдалитьСтарыеЗаписиТаблицыИстории(ЭтапВыполнения);
	МассивОтбораОрганизаций = Новый Массив;
	
	ТаблицаИстории = ТаблицаИсторииОбмена(ЭтапВыполнения);
	
	Для каждого СтрокаТаблицы Из ТаблицаИстории Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЭтапОбменаЕГАИС) Тогда
			МассивОтбораОрганизаций.Добавить(СтрокаТаблицы.Организация);
		КонецЕсли;	
	КонецЦикла; 
	
	ТаблицаОстатковЕГАИС = ОстаткиЕГАИСДляКрепкогоАлкоголя(МассивОтбораОрганизаций);
	
	РезультатЗапросаСканирования = РезультатСканированияКрепкогоАлкоголя(МассивОтбораОрганизаций, ЭтапВыполнения);
	
	ВыборкаПоНовымМаркам = РезультатЗапросаСканирования.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоНовымМаркам.Следующий() Цикл
		
		ВыборкаОрганизаций = ВыборкаПоНовымМаркам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОрганизаций.Следующий() Цикл
			// если за сегодня еще не списывали, для каждой организации вызываем списание крепкой бухашки
			
			ТаблицаМарокПревышающихОстатки = Новый ТаблицаЗначений;
			ТаблицаМарокПревышающихОстатки.Колонки.Добавить("Марка");
			ТаблицаМарокПревышающихОстатки.Колонки.Добавить("АлкогольнаяПродукция");
			ТаблицаМарокПревышающихОстатки.Колонки.Добавить("Номенклатура");
			ТаблицаМарокПревышающихОстатки.Колонки.Добавить("Количество");
			
			СоздатьЗаписьВИстории(ВыборкаОрганизаций.Организация, ЭтапВыполнения);
			ОтборВТаблицеИстории = Новый Структура("Организация",ВыборкаОрганизаций.Организация);
			СтрокиОрганизацииИзТаблицыИстории = ТаблицаИстории.НайтиСтроки(ОтборВТаблицеИстории);
			
			КоличествоСтрок = СтрокиОрганизацииИзТаблицыИстории.Количество();
			
			Если КоличествоСтрок = 0 Тогда
				//такого условие не может быть выполнено, т.к в выборке не может быть организации которой нет в ТаблицеИстории
			ИначеЕсли КоличествоСтрок = 1 Тогда
				УТМ = СтрокиОрганизацииИзТаблицыИстории[0].УТМ;
			ИначеЕсли КоличествоСтрок > 1 Тогда	
				ОписаниеОшибки = "Для одной организации " + ВыборкаОрганизаций.Организация + " найдено несколько УТМ. Списание невозможно.";
				ЗарегистрироватьОшибку(ВыборкаОрганизаций.Организация, ВыборкаОрганизаций.ЭтапОбменаЕГАИС, Справочники.ТоматоВидыОшибокОбменаЕГАИС.ПустаяСсылка(), ОписаниеОшибки);
				Продолжить;
			КонецЕсли; 
			
			ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.НайтиПоКоду(УТМ.ИдентификаторФСРАР);
			
			Если Не ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
				
				ОписаниеОшибки = "Не найдена организация " + ВыборкаОрганизаций.Организация + " в классификаторе ЕГАИС с кодом из УТМ" + УТМ.ИдентификаторФСРАР;
				ЗарегистрироватьОшибку(ВыборкаОрганизаций.Организация, ВыборкаОрганизаций.ЭтапОбменаЕГАИС, Справочники.ТоматоВидыОшибокОбменаЕГАИС.ПустаяСсылка(), ОписаниеОшибки);
				Продолжить;
			
			КонецЕсли; 
			
			НовыйДокументСписания = Документы.СписаниеТоваровЕГАИС.СоздатьДокумент();
			
			НовыйДокументСписания.Организация = ВыборкаОрганизаций.Организация;
			НовыйДокументСписания.Дата = НачалоДня(ТекущаяДата())-1;
			НовыйДокументСписания.ПричинаСписания = "Реализация";
			НовыйДокументСписания.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
			ТекстКомментария = "";
			Если ВыборкаПоНовымМаркам.ЭтоНоваяМарка Тогда
				НовыйДокументСписания.ХозОперация = Справочники.ХозОперации.АктСписанияИзРегистра1;	
				ТекстКомментария = "(по новым маркам)";
			Иначе
				НовыйДокументСписания.ХозОперация = Справочники.ХозОперации.АктСписанияИзРегистра2;	
				ТекстКомментария = "(по старым маркам)";
			КонецЕсли; 
			
			//НовыйДокументСписания. = ;
			//НовыйДокументСписания. = ;
			//НовыйДокументСписания.состо = Перечисления..ГотовКОтправке;
			НовыйДокументСписания.ПодразделениеКомпании = ПодразделениеОрганизации(ВыборкаОрганизаций.Организация);
			НовыйДокументСписания.РегламентированныйУчет = Истина;
			НовыйДокументСписания.УправленческийУчет = Истина;
			НовыйДокументСписания.Комментарий = "Списание крепкого алкоголя " + ТекстКомментария;

			
			ВыборкаКлассификаторов = ВыборкаОрганизаций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКлассификаторов.Следующий() Цикл
				
				ВыборкаПоСправке2 = ВыборкаКлассификаторов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоСправке2.Следующий() Цикл
					
					// распределим сначала то на что хватает количества на остатках в соответствии с номенклатурой ЕГАИС
					КоличествоМарок = 0;
					ТекНоменклатураСтруктура = ИнтеграцияЕГАИС.ПолучитьСоответствиеАлкоПродукции(ВыборкаКлассификаторов.Классификатор);
					
					НоваяСтрокаСписанияТоваров						 = НовыйДокументСписания.Товары.Добавить();
					НоваяСтрокаСписанияТоваров.АлкогольнаяПродукция	 = ВыборкаКлассификаторов.Классификатор;
					НоваяСтрокаСписанияТоваров.Номенклатура			 = ТекНоменклатураСтруктура.Номенклатура;
					НоваяСтрокаСписанияТоваров.ЕдиницаИзмерения		 = ТекНоменклатураСтруктура.ЕдиницаИзмерения;
					НоваяСтрокаСписанияТоваров.ИдентификаторМарок	 = НоваяСтрокаСписанияТоваров.НомерСтроки;
					НоваяСтрокаСписанияТоваров.ИдентификаторСтроки	 = НоваяСтрокаСписанияТоваров.НомерСтроки;
					
					
					ВыборкаМарок = ВыборкаПоСправке2.Выбрать();
					Пока ВыборкаМарок.Следующий() Цикл
						
						Если ВыборкаПоНовымМаркам.ЭтоНоваяМарка Тогда
							
							СтруктураПоМарке							 = ИнтеграцияЕГАИС.ПолучитьДанныеПоШтрихкоду(ВыборкаМарок.Марка, ОрганизацияЕГАИС);					
							НоваяСтрокаСписанияМарок					 = НовыйДокументСписания.Марки.Добавить();
							НоваяСтрокаСписанияМарок.КодМарки			 = ВыборкаМарок.Марка;
							НоваяСтрокаСписанияМарок.ИдентификаторМарок	 = НоваяСтрокаСписанияТоваров.НомерСтроки;
							НоваяСтрокаСписанияМарок.ИдентификаторСтроки = НоваяСтрокаСписанияТоваров.НомерСтроки;
							НоваяСтрокаСписанияМарок.НомерСправкиБ		 = ?(ЗначениеЗаполнено(СтруктураПоМарке.Справка2), СтруктураПоМарке.Справка2.Номер, "");
							
							КоличествоМарок = КоличествоМарок + 1;
							
						Иначе	
							Если КоличествоМарок >= ВыборкаМарок.КоличествоОстатка Тогда
								// Если чего-то не хватило на остатках ЕГАИС, тогда запоминаем для дальнейшего распределения
								НоваяСтрокаПревышения						 = ТаблицаМарокПревышающихОстатки.Добавить();
								НоваяСтрокаПревышения.Марка					 = ВыборкаМарок.Марка;
								НоваяСтрокаПревышения.АлкогольнаяПродукция	 = ВыборкаКлассификаторов.Классификатор;
								НоваяСтрокаПревышения.Номенклатура			 = ТекНоменклатураСтруктура.Номенклатура;
								НоваяСтрокаПревышения.Количество			 = 1;
								
								ТекстОшибки = "Не удалось списать с остатков марку " + ВыборкаМарок.Марка + " у алкогольной продукции " + ВыборкаКлассификаторов.Классификатор.Код;
								ЗарегистрироватьОшибку(НовыйДокументСписания.Организация, ЭтапВыполнения, Справочники.ТоматоВидыОшибокОбменаЕГАИС.ОшибкаПроведенияСписания, ТекстОшибки); 
							Иначе
								СтруктураПоМарке							 = ИнтеграцияЕГАИС.ПолучитьДанныеПоШтрихкоду(ВыборкаМарок.Марка, ОрганизацияЕГАИС);					
								НоваяСтрокаСписанияМарок					 = НовыйДокументСписания.Марки.Добавить();
								НоваяСтрокаСписанияМарок.КодМарки			 = ВыборкаМарок.Марка;
								НоваяСтрокаСписанияМарок.ИдентификаторМарок	 = НоваяСтрокаСписанияТоваров.НомерСтроки;
								НоваяСтрокаСписанияМарок.ИдентификаторСтроки = НоваяСтрокаСписанияТоваров.НомерСтроки;
								НоваяСтрокаСписанияМарок.НомерСправкиБ		 = ?(ЗначениеЗаполнено(СтруктураПоМарке.Справка2), СтруктураПоМарке.Справка2.Номер, "");
								
								КоличествоМарок = КоличествоМарок + 1;
							КонецЕсли; 
							
						КонецЕсли; 
						
						
					КонецЦикла; 
					Если КоличествоМарок = 0 Тогда
						НовыйДокументСписания.Товары.Удалить(НоваяСтрокаСписанияТоваров);
					Иначе
						НоваяСтрокаСписанияТоваров.Количество	 = КоличествоМарок;
						НоваяСтрокаСписанияТоваров.СправкаБ = ?(ЗначениеЗаполнено(ВыборкаПоСправке2.Справка2), ВыборкаПоСправке2.Справка2, СтруктураПоМарке.Справка2);
					КонецЕсли;	
				КонецЦикла; 
	
			КонецЦикла; 
			
			ТаблицаДокумента = НовыйДокументСписания.Товары.Выгрузить();
			ТаблицаДокумента.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
			ТаблицаДокумента.ЗаполнитьЗначения(НовыйДокументСписания.Организация, "Организация");
			ТаблицаОстатковСУчетомТекущегоСписания = ТаблицаВычитания(ТаблицаОстатковЕГАИС, ТаблицаДокумента);
			
			// распределяем то что не хватило на остатках с подменой номенклатуры ЕГАИС
			СвернутаяТаблицаМарок = ТаблицаМарокПревышающихОстатки.Скопировать();
			СвернутаяТаблицаМарок.Свернуть("Номенклатура", "Количество");
			
			Для каждого СтрокаПревышения Из СвернутаяТаблицаМарок Цикл
				
				ИндексМарки = 0;
				КоличествоКСписанию = СтрокаПревышения.Количество;
				
				ОтборПоНоменклатуре = Новый Структура;
				ОтборПоНоменклатуре.Вставить("Номенклатура", СтрокаПревышения.Номенклатура);
				МассивСтрокМарок = ТаблицаМарокПревышающихОстатки.НайтиСтроки(ОтборПоНоменклатуре);
				
				ОтборПоНоменклатуре.Вставить("Организация", ВыборкаОрганизаций.Организация);
				МассивСтрокОстатков = ТаблицаОстатковСУчетомТекущегоСписания.НайтиСтроки(ОтборПоНоменклатуре);
				
				Для каждого СтрокаОстатка Из МассивСтрокОстатков Цикл
					
					КоличестваОстатка = СтрокаОстатка.КоличествоОстатка;
					
					Пока КоличествоКСписанию > 0 И КоличестваОстатка > 0 Цикл
						
						СтрокаДокументаСписания = НовыйДокументСписания.Товары.Найти(СтрокаОстатка.АлкогольнаяПродукция,"АлкогольнаяПродукция");
						Если СтрокаДокументаСписания = Неопределено Тогда
							
							ТекНоменклатураСтруктура						 = ИнтеграцияЕГАИС.ПолучитьСоответствиеАлкоПродукции(СтрокаОстатка.АлкогольнаяПродукция);
							
							СтрокаДокументаСписания							 = НовыйДокументСписания.Товары.Добавить();
							СтрокаДокументаСписания.АлкогольнаяПродукция	 = СтрокаОстатка.АлкогольнаяПродукция;
							СтрокаДокументаСписания.Номенклатура			 = ТекНоменклатураСтруктура.Номенклатура;
							СтрокаДокументаСписания.ЕдиницаИзмерения		 = ТекНоменклатураСтруктура.ЕдиницаИзмерения;
							СтрокаДокументаСписания.ИдентификаторМарок		 = СтрокаДокументаСписания.НомерСтроки;
							СтрокаДокументаСписания.ИдентификаторСтроки		 = СтрокаДокументаСписания.НомерСтроки;
							СтрокаДокументаСписания.Количество = 0;
							
						КонецЕсли; 
						
						СтруктураПоМарке							 = ИнтеграцияЕГАИС.ПолучитьДанныеПоШтрихкоду(МассивСтрокМарок[ИндексМарки].Марка, ОрганизацияЕГАИС);					
						НоваяСтрокаСписанияМарок					 = НовыйДокументСписания.Марки.Добавить();
						НоваяСтрокаСписанияМарок.КодМарки			 = МассивСтрокМарок[ИндексМарки].Марка;
						НоваяСтрокаСписанияМарок.ИдентификаторМарок	 = СтрокаДокументаСписания.НомерСтроки;
						НоваяСтрокаСписанияМарок.ИдентификаторСтроки = СтрокаДокументаСписания.НомерСтроки;
						НоваяСтрокаСписанияМарок.НомерСправкиБ		 = ?(ЗначениеЗаполнено(СтруктураПоМарке.Справка2), СтруктураПоМарке.Справка2.Номер, "");
						
						СтрокаДокументаСписания.Количество = СтрокаДокументаСписания.Количество + 1;
						
						КоличествоКСписанию = КоличествоКСписанию - 1;
						КоличестваОстатка = КоличестваОстатка - 1;
						ИндексМарки = ИндексМарки + 1;
						
					КонецЦикла; 
				
				КонецЦикла;
				
				Если КоличествоКСписанию <> 0 Тогда
					//
					//Для  По  Цикл
					//
					//	
					//
					//КонецЦикла; 
					ТекстОшибки = "Не удалось списать с остатков " + СтрокаПревышения.Номенклатура + " в количестве " + КоличествоКСписанию;
					ЗарегистрироватьОшибку(НовыйДокументСписания.Организация, ЭтапВыполнения, Справочники.ТоматоВидыОшибокОбменаЕГАИС.ОшибкаПроведенияСписания, ТекстОшибки); 
				КонецЕсли; 
				
			КонецЦикла; 
			
			Для каждого СтрокаСписанияТоваров Из НовыйДокументСписания.Товары Цикл
				СтрокаСписанияТоваров.СуммаПродажи = НайтиСуммуПродажиЕГАИСДляНоменклатуры(СтрокаСписанияТоваров.АлкогольнаяПродукция,
																							СтрокаСписанияТоваров.Номенклатура,
																							СтрокаСписанияТоваров.ЕдиницаИзмерения,
																							СтрокаСписанияТоваров.Количество,
																							НовыйДокументСписания);			
			КонецЦикла; 
			
			Если НовыйДокументСписания.Товары.Количество() <> 0 Тогда
				Попытка
					//НовыйДокументСписания.ОбменДанными.Загрузка = Истина;
					НовыйДокументСписания.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЗарегистрироватьОшибку(ВыборкаОрганизаций.Организация, ВыборкаОрганизаций.ЭтапОбменаЕГАИС, Справочники.ТоматоВидыОшибокОбменаЕГАИС.ПустаяСсылка(), ОписаниеОшибки);
					Продолжить;
				КонецПопытки;
				
				УстановитьДокументСписанияВРСКрепкогоАлкоголя(НовыйДокументСписания.Ссылка);
				
				СообщениеОбОшибке = "";
				ИнтеграцияЕГАИС.ОтправитьАктСписания(НовыйДокументСписания, УТМ, СообщениеОбОшибке);
				Если СообщениеОбОшибке = "" Тогда
					ДополнитьЗаписьИсторииИДЗапроса(ВыборкаОрганизаций.Организация, ЭтапВыполнения, НовыйДокументСписания.ИдентификаторЗапроса);
					//УдалитьКрепкийАлкоголь(ВыборкаОрганизаций.Организация);
				Иначе	
					ЗарегистрироватьОшибку(ВыборкаОрганизаций.Организация, ЭтапВыполнения, Справочники.ТоматоВидыОшибокОбменаЕГАИС.ПустаяСсылка(), СообщениеОбОшибке);
				КонецЕсли; 
				
			Иначе
				УстановитьВыполнениеЗаписиИстории(ВыборкаОрганизаций.Организация, ЭтапВыполнения);				
			КонецЕсли; 
			
		КонецЦикла; 
	
	КонецЦикла; 
	
	// Проверяем как долго не было ответа от ЕГАИС-а. Если больше 3х часов молчит, значит включить Panic mode
	ПроверитьТаблицуИсторииНаДлительныеОперации(ТаблицаИстории);
	

КонецПроцедуры
 

Процедура ЗагрузитьСправкиПоФорме1ЗаПериод(ДатаНачала = Неопределено, ДатаОкончания = Неопределено)Экспорт
	
	
	Если ДатаНачала = Неопределено Тогда
		ДатаНачала = НачалоДня(ТекущаяДата() - 3 * 24 * 3600);
	КонецЕсли;
		
	Если ДатаОкончания = Неопределено Тогда
		ДатаОкончания = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СправкиА.АлкогольнаяПродукция
	|ПОМЕСТИТЬ ВТ_СправокА
	|ИЗ
	|	Справочник.СправкиА КАК СправкиА
	|ГДЕ
	|	НЕ СправкиА.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиЕГАИС.Организация,
	|	МАКСИМУМ(ОстаткиЕГАИС.Дата) КАК Дата,
	|	ОстаткиЕГАИС.ХозОперация
	|ПОМЕСТИТЬ ВТ_ДатыПоследнихДокументовОстатков
	|ИЗ
	|	Документ.ОстаткиЕГАИС КАК ОстаткиЕГАИС
	|ГДЕ
	|	ОстаткиЕГАИС.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиЕГАИС.Организация,
	|	ОстаткиЕГАИС.ХозОперация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция,
	|	ВТ_ДатыПоследнихДокументовОстатков.Организация
	|ПОМЕСТИТЬ ВТ_АлкоголяОстатков
	|ИЗ
	|	ВТ_ДатыПоследнихДокументовОстатков КАК ВТ_ДатыПоследнихДокументовОстатков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОстаткиЕГАИС.ОстаткиПоДаннымЕГАИС КАК ОстаткиЕГАИСОстаткиПоДаннымЕГАИС
	|		ПО ВТ_ДатыПоследнихДокументовОстатков.Организация = ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация
	|			И ВТ_ДатыПоследнихДокументовОстатков.Дата = ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Дата
	|			И ВТ_ДатыПоследнихДокументовОстатков.ХозОперация = ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ХозОперация
	|ГДЕ
	|	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция,
	|	ВТ_ДатыПоследнихДокументовОстатков.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварноТранспортнаяНакладнаяЕГАИСТовары.АлкогольнаяПродукция,
	|	ТоварноТранспортнаяНакладнаяЕГАИСТовары.Ссылка.Дата,
	|	ТоварноТранспортнаяНакладнаяЕГАИСТовары.Ссылка.Организация,
	|	ТоварноТранспортнаяНакладнаяЕГАИСТовары.НомерСправкиА
	|ПОМЕСТИТЬ ВТ_ТТН
	|ИЗ
	|	Документ.ТоварноТранспортнаяНакладнаяЕГАИС.Товары КАК ТоварноТранспортнаяНакладнаяЕГАИСТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АлкоголяОстатков КАК ВТ_АлкоголяОстатков
	|		ПО ТоварноТранспортнаяНакладнаяЕГАИСТовары.АлкогольнаяПродукция = ВТ_АлкоголяОстатков.АлкогольнаяПродукция
	|			И ТоварноТранспортнаяНакладнаяЕГАИСТовары.Ссылка.Организация = ВТ_АлкоголяОстатков.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТТН.АлкогольнаяПродукция,
	|	МАКСИМУМ(ВТ_ТТН.Дата) КАК Дата,
	|	ВТ_ТТН.Организация
	|ПОМЕСТИТЬ ВТ_ДатТТН
	|ИЗ
	|	ВТ_ТТН КАК ВТ_ТТН
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТТН.АлкогольнаяПродукция,
	|	ВТ_ТТН.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТТН.АлкогольнаяПродукция,
	|	ВТ_ТТН.Дата,
	|	ВТ_ТТН.Организация,
	|	ВТ_ТТН.НомерСправкиА
	|ПОМЕСТИТЬ ВТ_НомеровСправокА
	|ИЗ
	|	ВТ_ТТН КАК ВТ_ТТН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатТТН КАК ВТ_ДатТТН
	|		ПО ВТ_ТТН.АлкогольнаяПродукция = ВТ_ДатТТН.АлкогольнаяПродукция
	|			И ВТ_ТТН.Дата = ВТ_ДатТТН.Дата
	|			И ВТ_ТТН.Организация = ВТ_ДатТТН.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТранспортныеМодулиЕГАИС.Ссылка КАК ТранспортныйМодуль,
	|	ВТ_НомеровСправокА.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ВТ_НомеровСправокА.НомерСправкиА КАК НомерСправкиА
	|ИЗ
	|	ВТ_НомеровСправокА КАК ВТ_НомеровСправокА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СправокА КАК ВТ_СправокА
	|		ПО ВТ_НомеровСправокА.АлкогольнаяПродукция = ВТ_СправокА.АлкогольнаяПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТранспортныеМодулиЕГАИС КАК ТранспортныеМодулиЕГАИС
	|		ПО ВТ_НомеровСправокА.Организация = ТранспортныеМодулиЕГАИС.Организация
	|ГДЕ
	|	ВТ_СправокА.АлкогольнаяПродукция ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ТранспортныеМодулиЕГАИС.Ссылка,
	|	ВТ_НомеровСправокА.АлкогольнаяПродукция,
	|	ВТ_НомеровСправокА.НомерСправкиА
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСправкиА,
	|	АлкогольнаяПродукция,
	|	ТранспортныйМодуль";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаДанных = РезультатЗапроса.Выгрузить();
	
	ТаблицаДляНомеклатуры = ТаблицаДанных.Скопировать(,"АлкогольнаяПродукция");
	ТаблицаДляНомеклатуры.Свернуть("АлкогольнаяПродукция");
	
	Для каждого СтрокаНомеклатуры Из ТаблицаДляНомеклатуры Цикл
	
		СтрокаФормы1 = ТаблицаДанных.Найти(СтрокаНомеклатуры.АлкогольнаяПродукция, "АлкогольнаяПродукция");
		Если СтрокаФормы1 <> Неопределено Тогда
			ИнтеграцияЕГАИС.ДействияФормыЗапросСправки(СтрокаФормы1.ТранспортныйМодуль, СтрокаФормы1.НомерСправкиА);		
		КонецЕсли; 
	
	КонецЦикла; 

КонецПроцедуры

Функция ТаблицаИсторииОбмена(Знач ЭтапОбменаЕГАИС)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.Организация,
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.Период,
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.ЭтапОбменаЕГАИС,
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.Выполнен,
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.ИдентификаторЗапроса
	|ПОМЕСТИТЬ ВТ_ИсторииОбмена
	|ИЗ
	|	РегистрСведений.ТоматоИсторияОбменаЕГАИС.СрезПоследних(, ЭтапОбменаЕГАИС = &ЭтапОбменаЕГАИС) КАК ТоматоИсторияОбменаЕГАИССрезПоследних
	|ГДЕ
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.Период МЕЖДУ &НачалоТекущегоДня И &КонецТекущегоДня
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.Организация,
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.Период,
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.ЭтапОбменаЕГАИС,
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.Выполнен,
	|	ТоматоИсторияОбменаЕГАИССрезПоследних.ИдентификаторЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТранспортныеМодулиЕГАИС.Ссылка КАК УТМ,
	|	ТранспортныеМодулиЕГАИС.Организация КАК Организация,
	|	ЕСТЬNULL(ВТ_ИсторииОбмена.Период, НЕОПРЕДЕЛЕНО) КАК Период,
	|	ЕСТЬNULL(ВТ_ИсторииОбмена.Выполнен, ЛОЖЬ) КАК Выполнен,
	|	ЕСТЬNULL(ВТ_ИсторииОбмена.ЭтапОбменаЕГАИС, НЕОПРЕДЕЛЕНО) КАК ЭтапОбменаЕГАИС,
	|	ЕСТЬNULL(ВТ_ИсторииОбмена.ИдентификаторЗапроса, """") КАК ИдентификаторЗапроса
	|ИЗ
	|	Справочник.ТранспортныеМодулиЕГАИС КАК ТранспортныеМодулиЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсторииОбмена КАК ВТ_ИсторииОбмена
	|		ПО ТранспортныеМодулиЕГАИС.Организация = ВТ_ИсторииОбмена.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоматоОрганизацииАвтоЕГАИСа КАК ТоматоОрганизацииАвтоЕГАИСа
	|		ПО ТранспортныеМодулиЕГАИС.Организация = ТоматоОрганизацииАвтоЕГАИСа.Организация
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &АвтоЕГАИС
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ ТоматоОрганизацииАвтоЕГАИСа.Организация ЕСТЬ NULL
	|		КОНЕЦ
	|	И НЕ ТранспортныеМодулиЕГАИС.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ЭтапОбменаЕГАИС",	 ЭтапОбменаЕГАИС);
	Запрос.УстановитьПараметр("НачалоТекущегоДня",	 НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонецТекущегоДня",	 КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("АвтоЕГАИС",			 Константы.ТоматоИспользоватьАвтоЕГАИСДляВсехРесторанов.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаОтвета = РезультатЗапроса.Выгрузить();
	ТаблицаОтвета.Индексы.Добавить("ЭтапОбменаЕГАИС");
	ТаблицаОтвета.Индексы.Добавить("Выполнен");
	
	Возврат ТаблицаОтвета;

КонецФункции // УТМКОбмену()

Функция ТаблицаДокументовОстатковПоМассивуИдентификаторов(знач МассивИдентификаторовЗапроса)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиЕГАИС.Ссылка КАК ДокументОстатков,
	|	ОстаткиЕГАИС.ИдентификаторЗапроса КАК ИдентификаторЗапроса
	|ИЗ
	|	Документ.ОстаткиЕГАИС КАК ОстаткиЕГАИС
	|ГДЕ
	|	ОстаткиЕГАИС.ИдентификаторЗапроса В(&МассивИдентификаторовЗапроса)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиЕГАИС.Ссылка";
	
	Запрос.УстановитьПараметр("МассивИдентификаторовЗапроса", МассивИдентификаторовЗапроса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаОтвета = РезультатЗапроса.Выгрузить();
	ТаблицаОтвета.Индексы.Добавить("ИдентификаторЗапроса");
	
	Возврат ТаблицаОтвета

КонецФункции // ТаблицаДокументовОстатковПоМассивуИдентификаторов()

Функция РезультатСканированияКрепкогоАлкоголя(МассивОрганизаций, ЭтапВыполнения)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиЕГАИС.Дата,
	|	ОстаткиЕГАИС.Организация,
	|	ОстаткиЕГАИС.Номер
	|ПОМЕСТИТЬ ВТ_ДляПоследнихДокументов
	|ИЗ
	|	Документ.ОстаткиЕГАИС КАК ОстаткиЕГАИС
	|ГДЕ
	|	ОстаткиЕГАИС.Организация В(&МассивОрганизаций)
	|	И ОстаткиЕГАИС.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.РегистрацияОстатковВТорговомЗалеЕГАИС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДляПоследнихДокументов.Организация,
	|	МАКСИМУМ(ВТ_ДляПоследнихДокументов.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТ_МаксимальныхДат
	|ИЗ
	|	ВТ_ДляПоследнихДокументов КАК ВТ_ДляПоследнихДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДляПоследнихДокументов.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДляПоследнихДокументов.Организация,
	|	МАКСИМУМ(ВТ_ДляПоследнихДокументов.Номер) КАК Номер,
	|	ВТ_ДляПоследнихДокументов.Дата
	|ПОМЕСТИТЬ ВТ_МаксимальныхНомеров
	|ИЗ
	|	ВТ_ДляПоследнихДокументов КАК ВТ_ДляПоследнихДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксимальныхДат КАК ВТ_МаксимальныхДат
	|		ПО ВТ_ДляПоследнихДокументов.Организация = ВТ_МаксимальныхДат.Организация
	|			И ВТ_ДляПоследнихДокументов.Дата = ВТ_МаксимальныхДат.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДляПоследнихДокументов.Организация,
	|	ВТ_ДляПоследнихДокументов.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоматоСканированиеКрепкогоАлкоголя.Организация КАК Организация,
	|	ТоматоСканированиеКрепкогоАлкоголя.Классификатор КАК Классификатор,
	|	ТоматоСканированиеКрепкогоАлкоголя.Марка КАК Марка,
	|	1 КАК Количество,
	|	ЕСТЬNULL(ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Количество, 0) КАК КоличествоОстатка,
	|	НЕ АкцизныеМаркиЕГАИС.АкцизнаяМарка ЕСТЬ NULL КАК ЭтоНоваяМарка,
	|	АкцизныеМаркиЕГАИС.Справка2 КАК Справка2
	|ИЗ
	|	РегистрСведений.ТоматоСканированиеКрепкогоАлкоголя КАК ТоматоСканированиеКрепкогоАлкоголя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОстаткиЕГАИС.ОстаткиПоДаннымЕГАИС КАК ОстаткиЕГАИСОстаткиПоДаннымЕГАИС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксимальныхНомеров КАК ВТ_МаксимальныхНомеров
	|			ПО ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация = ВТ_МаксимальныхНомеров.Организация
	|				И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Дата = ВТ_МаксимальныхНомеров.Дата
	|				И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Номер = ВТ_МаксимальныхНомеров.Номер
	|		ПО ТоматоСканированиеКрепкогоАлкоголя.Классификатор = ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция
	|			И ТоматоСканированиеКрепкогоАлкоголя.Организация = ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|		ПО ТоматоСканированиеКрепкогоАлкоголя.Марка = АкцизныеМаркиЕГАИС.АкцизнаяМарка
	|ГДЕ
	|	ТоматоСканированиеКрепкогоАлкоголя.Организация В(&МассивОрганизаций)
	|	И ТоматоСканированиеКрепкогоАлкоголя.ДатаСканирования < &ТекущаяДата
	|	И ТоматоСканированиеКрепкогоАлкоголя.ДокументСписания = ЗНАЧЕНИЕ(Документ.СписаниеТоваровЕГАИС.ПустаяСсылка)
	|	И (НЕ АкцизныеМаркиЕГАИС.АкцизнаяМарка ЕСТЬ NULL) = &ПоНовымМаркам
	|ИТОГИ
	|	СУММА(Количество),
	|	МИНИМУМ(КоличествоОстатка)
	|ПО
	|	ЭтоНоваяМарка,
	|	Организация,
	|	Классификатор,
	|	Справка2";
	
	
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("ПоНовымМаркам", ЭтапВыполнения = Перечисления.ТоматоЭтапыОбменаЕГАИС.ФормированиеСписанияКрепкогоАлкоголяАкт1);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции // ТаблицаСписанияКрепкогоАлкоголя()

Процедура ПроверитьТаблицуИсторииНаДлительныеОперации(ТаблицаИстории)


	ТекущаяДата = ТекущаяДата();
	
	ТаблицаОшибок = ТаблицаОшибокЗаДату(ТекущаяДата);
	
	#Если РакНаГореСвистнет Тогда
	 	ТаблицаИстории = Новый ТаблицаЗначений;
		ТаблицаОшибок  = Новый ТаблицаЗначений;
	#КонецЕсли 	
	
	ТекстСообщения = "Этап обмена ожидает ответа уже более 3х часов!";
	
	Для каждого СтрокаТаблицыИстории Из ТаблицаИстории Цикл
		Если НЕ СтрокаТаблицыИстории.Выполнен И ЗначениеЗаполнено(СтрокаТаблицыИстории.Период) Тогда
			КоличествоЧасовОжидания = (ТекущаяДата - СтрокаТаблицыИстории.Период)/3600;
			Если КоличествоЧасовОжидания >=3 Тогда
				ОтборОшибок = Новый Структура;
				ОтборОшибок.Вставить("Организация", СтрокаТаблицыИстории.Организация);
				ОтборОшибок.Вставить("ЭтапОбмена", СтрокаТаблицыИстории.ЭтапОбменаЕГАИС);
				ОтборОшибок.Вставить("ВидОшибки", Справочники.ТоматоВидыОшибокОбменаЕГАИС.ЗависшийЗапрос);
				ОтборОшибок.Вставить("ОписаниеОшибки", ТекстСообщения);
				
				СтрокиОшибок = ТаблицаОшибок.НайтиСтроки(ОтборОшибок);
				Если СтрокиОшибок.Количество() = 0 Тогда
					ЗарегистрироватьОшибку(СтрокаТаблицыИстории.Организация, СтрокаТаблицыИстории.ЭтапОбменаЕГАИС, Справочники.ТоматоВидыОшибокОбменаЕГАИС.ЗависшийЗапрос, ТекстСообщения);	
				КонецЕсли;
				
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

Процедура УстановитьПризнакОтправкиОшибки(ДанныеЗаписи)

	ЗаписьВРС = РегистрыСведений.ТоматоОшибкиОбменаЕГАИС.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ЗаписьВРС, ДанныеЗаписи);
	ЗаписьВРС.Отправлена = Истина;
	ЗаписьВРС.Записать();

КонецПроцедуры

Функция ДокументСписанияНекрепкогоАлкоголя(СтрокаТаблицыИстории, Знач ТаблицаОстатковПоПиву, КоличествоТоваров, ТаблицаИсключений)
		
	КоличествоТоваров = 0;
	СсылкаНаСписание = Документы.СписаниеТоваровЕГАИС.ПустаяСсылка();
	
	ПивоБерлинскийМедведьМалинаПП = Справочники.Номенклатура.НайтиПоКоду("ЦБ000009241");
	ПивоСветлоеПшеничноеПП = Справочники.Номенклатура.НайтиПоКоду("ЦБ000004355");
	
	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.НайтиПоКоду(СтрокаТаблицыИстории.УТМ.ИдентификаторФСРАР);
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
		Возврат СсылкаНаСписание;
	КонецЕсли; 
	
	Подразделение = ПодразделениеОрганизации(СтрокаТаблицыИстории.Организация);
	
	ДокументСписания = Документы.СписаниеТоваровЕГАИС.СоздатьДокумент();
	ТЧСписания = ДокументСписания.Товары;
	
	ТаблицаПродажПоПиву 	 = ТаблицаПродажЗаВчера(СтрокаТаблицыИстории);

	//ОБЯЗАТЕЛЬНО УДАЛИТЬ после написания и отладки кода
	#Если РакНаГореСвистнет Тогда
		ТаблицаОстатковПоПиву	 = Новый ТаблицаЗначений;
		ТаблицаПродажПоПиву 	 = Новый ТаблицаЗначений;
	#КонецЕсли
	
	ДокументСписания.Организация = СтрокаТаблицыИстории.Организация;
	ДокументСписания.Дата = НачалоДня(ТекущаяДата())-1;
	ДокументСписания.ПричинаСписания = "Реализация";
	ДокументСписания.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ДокументСписания.ХозОперация = Справочники.ХозОперации.АктСписанияИзРегистра2;
	
	ДокументСписания.ПодразделениеКомпании = Подразделение;
	ДокументСписания.РегламентированныйУчет = Истина;
	ДокументСписания.УправленческийУчет = Истина;
	ДокументСписания.Комментарий = "Списание пива";
	
	Для каждого СтрокаПродажПоПиву Из ТаблицаПродажПоПиву Цикл
		
		Если СтрокаПродажПоПиву.Номенклатура = ПивоБерлинскийМедведьМалинаПП Тогда
			НоменклатураПоиска = ПивоСветлоеПшеничноеПП;
		Иначе
			НоменклатураПоиска = СтрокаПродажПоПиву.Номенклатура;
		КонецЕсли;
		
		ОтборВТаблицеИсключений = Новый Структура;
		ОтборВТаблицеИсключений.Вставить("Организация", СтрокаТаблицыИстории.Организация);
		ОтборВТаблицеИсключений.Вставить("Номенклатура", НоменклатураПоиска);
		
		СтрокиТаблицыИсключений = ТаблицаИсключений.НайтиСтроки(ОтборВТаблицеИсключений);
		
		Если СтрокиТаблицыИсключений.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		КоличествоКСписанию	 = СтрокаПродажПоПиву.Количество;
		КоличествоОстатка	 = СтрокаПродажПоПиву.КоличествоОстатка;
		
		ОтборДляСписания = Новый Структура;
		ОтборДляСписания.Вставить("Организация", СтрокаТаблицыИстории.Организация);
		ОтборДляСписания.Вставить("Номенклатура", НоменклатураПоиска);
		
		СтрокиТаблицыОстатков = ТаблицаОстатковПоПиву.НайтиСтроки(ОтборДляСписания);
		
		Для каждого СтрокаТаблицыОстатков Из СтрокиТаблицыОстатков Цикл
			
			Пока КоличествоКСписанию > 0 Цикл
				// Взять первую номенклатуру подсчитать сколько остатка в единицах измерения текущей продукции егаис
				КоличествоОстаткаЕГАИС	 = Томато.ПолучитьКоличествоВЕдиницахЕГАИС(КоличествоОстатка, СтрокаТаблицыОстатков.АлкогольнаяПродукция);
				// Считаем сколько нужно списать в единицах егаис
				КоличествоКСписаниюЕГАИС = Томато.ПолучитьКоличествоВЕдиницахЕГАИС(КоличествоКСписанию, СтрокаТаблицыОстатков.АлкогольнаяПродукция);
				// Считаем сколько нужно списать целых единиц в остатках егаис
				ОстатокНаКонец = КоличествоОстаткаЕГАИС - КоличествоКСписаниюЕГАИС;
				ОкругленноеКоличествоКСписаниюЕГАИС = Цел(КоличествоОстаткаЕГАИС) - Цел(ОстатокНаКонец);
				
				Если СтрокаТаблицыОстатков.Количество > ОкругленноеКоличествоКСписаниюЕГАИС Тогда
					// Если на остатках ЕГАИС больше чем нужно списать - списываем полностью нужное количество
					КСписаниюВЕдиницахЕГАИС = ОкругленноеКоличествоКСписаниюЕГАИС;
				Иначе	
					// Если на остатках ЕГАИС меньше чем нужно списать, списываем что можем
					КСписаниюВЕдиницахЕГАИС = СтрокаТаблицыОстатков.Количество;
				КонецЕсли; 
				
				Если КСписаниюВЕдиницахЕГАИС <> 0 Тогда
					НоваяСтрока						 = ТЧСписания.Добавить();
					НоваяСтрока.АлкогольнаяПродукция = СтрокаТаблицыОстатков.АлкогольнаяПродукция;
					НоваяСтрока.Номенклатура		 = СтрокаПродажПоПиву.Номенклатура;
					НоваяСтрока.ЕдиницаИзмерения	 = СтрокаПродажПоПиву.ЕдиницаИзмерения;
					НоваяСтрока.Количество			 = КСписаниюВЕдиницахЕГАИС;
					НоваяСтрока.СуммаПродажи		 = НайтиСуммуПродажиЕГАИСДляНоменклатуры(НоваяСтрока.АлкогольнаяПродукция,
																							НоваяСтрока.Номенклатура,
																							НоваяСтрока.ЕдиницаИзмерения,
																							НоваяСтрока.Количество,
																							ДокументСписания);			
					// Пересчитываем количество в учетных единицах и уменьшаем количество которое нужно списать, а так же остаток.
					КоличествоКСписанию = КоличествоКСписанию - Томато.ПолучитьКоличествоВУчетныхЕдиницах(КСписаниюВЕдиницахЕГАИС, СтрокаТаблицыОстатков.АлкогольнаяПродукция);
					КоличествоОстатка = КоличествоОстатка - Томато.ПолучитьКоличествоВУчетныхЕдиницах(КСписаниюВЕдиницахЕГАИС, СтрокаТаблицыОстатков.АлкогольнаяПродукция);
					
				Иначе
					КоличествоКСписанию = 0;
					Прервать;
				КонецЕсли; 
				// Повторяем до тех пор пока нужное количество не уйдет в 0.
			КонецЦикла;
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	КоличествоТоваров = ДокументСписания.Товары.Количество();
	
	Если КоличествоТоваров <> 0 Тогда
		Попытка
			ДокументСписания.Записать(РежимЗаписиДокумента.Проведение);
			СсылкаНаСписание = ДокументСписания.Ссылка;
		Исключение
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗарегистрироватьОшибку(СтрокаТаблицыИстории.Организация, СтрокаТаблицыИстории.ЭтапОбменаЕГАИС, Справочники.ТоматоВидыОшибокОбменаЕГАИС.ПустаяСсылка(), ОписаниеОшибки);
		КонецПопытки; 
	КонецЕсли;
	
	Возврат СсылкаНаСписание;
	
КонецФункции

Функция ПодразделениеОрганизации(Знач Организация)
	
	Перем Выборка, Запрос, Подразделение;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПодразделенияКомпании.Ссылка
	               |ИЗ
	               |	Справочник.ПодразделенияКомпании КАК ПодразделенияКомпании
	               |ГДЕ
	               |	НЕ ПодразделенияКомпании.ПометкаУдаления
	               |	И ПодразделенияКомпании.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Подразделение = Выборка.Ссылка;
	Иначе
		Подразделение = Справочники.ПодразделенияКомпании.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Подразделение;

КонецФункции

Функция ТаблицаПродажЗаВчера(СтрокаТаблицыИстории)

	ТаблицаОтвета = Новый ТаблицаЗначений;
	
	ТаблицаОтвета.Колонки.Добавить("Номенклатура");
	ТаблицаОтвета.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаОтвета.Колонки.Добавить("Коэффициент");
	ТаблицаОтвета.Колонки.Добавить("Количество");
	ТаблицаОтвета.Колонки.Добавить("КоличествоОстатка");
	//ТаблицаОтвета.Колонки.Добавить("АлкогольнаяПродукция");
	//ТаблицаОтвета.Колонки.Добавить("СуммаПродажи");
	
	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.НайтиПоКоду(СтрокаТаблицыИстории.УТМ.ИдентификаторФСРАР);
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли; 
	
	ВидПродукцииПива = МассивВидовПродукцииПива();
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
		Сообщить("Не заполнена организация ЕГАИС");
		Возврат Неопределено;
	КонецЕсли;
	
	//++ 2019-04-29 |  Хан Алексей Вячеславович | Задача ITIL № 
	// Если нет ИНН или КПП у подразделения, то документы не создаются.
	// Заменил на выбор подразделения из УТМ-ки
	// было +++++
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ПодразделенияКомпании.Ссылка
	//|ИЗ
	//|	Справочник.ПодразделенияКомпании КАК ПодразделенияКомпании
	//|ГДЕ
	//|	ПодразделенияКомпании.ИНН = &ИНН
	//|	И ПодразделенияКомпании.КПП = &КПП
	//|	И НЕ ПодразделенияКомпании.ПометкаУдаления";
	//
	//Запрос.УстановитьПараметр("ИНН", ОрганизацияЕГАИС.ИНН);
	//Запрос.УстановитьПараметр("КПП", ОрганизацияЕГАИС.КПП);
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	текПодразделение = Выборка.Ссылка;
	//Иначе
	//	текПодразделение = Справочники.ПодразделенияКомпании.ПустаяСсылка();
	//КонецЕсли;
	//
	// было -----
	// стало +++++
	текПодразделение = СтрокаТаблицыИстории.УТМ.ПодразделениеКомпании;
	// стало -----
	//-- 2019-04-29 |  
	
	//++ 2019-02-27 |   | Задача ITIL № в рамках спринта №6
	// +++ было +++
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//| Организации.Ссылка
	//|ИЗ
	//| Справочник.Организации КАК Организации
	//|ГДЕ
	//| Организации.ИНН = &ИНН
	//| И Организации.КПП = &КПП
	//| И НЕ Организации.ПометкаУдаления";
	//
	//Запрос.УстановитьПараметр("ИНН", ОрганизацияЕГАИС.ИНН);
	//Запрос.УстановитьПараметр("КПП", ОрганизацияЕГАИС.КПП);
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	текОрганизация = Выборка.Ссылка;
	//Иначе
	//	текОрганизация = Справочники.Организации.ПустаяСсылка()
	//КонецЕсли;
	// --- было ---
	текОрганизация = текПодразделение.Организация;
	//-- 2019-02-27 |  
	
	Если текОрганизация.Пустая() И текПодразделение.Пустая() Тогда
		Сообщить("Не найдена учетная организация или подразделение по соответствию ИНН и КПП организации ЕГАИС");
		Возврат Неопределено;
	КонецЕсли;
	
	ВидыПродукцииПива = МассивВидовПродукцииПива();
	
	// Получение вида учета
	ВидУчета = обПраво("ВидУчета");
	Если ВидУчета=Перечисления.ВидыУчета.УправленческийИРегламентированный Тогда
		ВидУчетаПоУмолчанию = обПраво("ВидУчетаПоУмолчанию");
		Если ВидУчетаПоУмолчанию=Перечисления.ВидыУчета.Управленческий Тогда
			УправленческийУчет = Истина;
		Иначе
			УправленческийУчет = Ложь;
		КонецЕсли;
	Иначе
		Если ВидУчета=Перечисления.ВидыУчета.Регламентированный Тогда
			УправленческийУчет = Ложь;
		Иначе
			УправленческийУчет = Истина;
		КонецЕсли;
	КонецЕсли;
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	СтруктураПараметров = НОвый Структура();
	СтруктураПараметров.Вставить("Дата", НачалоДня(ТекущаяДата())-1);
	//СтруктураПараметров.Вставить("Дата", НачалоДня('20181005000000')-1);
	СтруктураПараметров.Вставить("Организация", текОрганизация);
	СтруктураПараметров.Вставить("ПодразделениеКомпании", текПодразделение);
	СтруктураПараметров.Вставить("Склад", Справочники.СкладыКомпании.ПустаяСсылка());
	СтруктураПараметров.Вставить("УправленческийУчет", УправленческийУчет);
	СтруктураПараметров.Вставить("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	
	Результат = Документы.ОтчетЖурналПродажиАлкогольнойПродукции.ПолучитьРезультатПродажАлкогольнойПродукцииПоАктамВскрытия(СтруктураПараметров, МВТ);
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВидыПродукцииПива.Найти(Выборка.Номенклатура.ВидАлкогольнойПродукции) = Неопределено Тогда
			//ТекстОшибки = "Для номенклатуры " + Выборка.Номенклатура + " код:" + Выборка.Номенклатура.Код + " не заполнен Вид алкогольной продукции!";
			//ЗарегистрироватьОшибку(текОрганизация, Перечисления.ТоматоЭтапыОбменаЕГАИС.ФормированиеСписанияНекрепкогоАлкоголя, , ТекстОшибки); 
			Продолжить;
		КонецЕсли;
		
		НовСтрока = ТаблицаОтвета.Добавить();
		НовСтрока.Номенклатура = Выборка.Номенклатура;
		НовСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		НовСтрока.Коэффициент = Выборка.ЕдиницаИзмерения.Коэффициент;
		
	КонецЦикла;
	
	Если Константы.ВЖурналеАлкоПродукцииИспользоватьТолькоАкты.Получить() Тогда
		Возврат ТаблицаОтвета;
	КонецЕсли;
	
	Результат = Документы.ОтчетЖурналПродажиАлкогольнойПродукции.ПолучитьРезультатПродажАлкогольнойПродукцииПоОстаткам(СтруктураПараметров, МВТ);
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВладелецЕдиницы = ?(Выборка.Номенклатура.ТипНоменклатуры.ИспользованиеЕдиницИзмерения = 2,Выборка.Номенклатура, Выборка.Номенклатура.ТипНоменклатуры);
		ТарнаяЕдИзм = Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("ТарнаяЕдиницаИзмерения", Истина, , ВладелецЕдиницы);
		
		Если ВидыПродукцииПива.Найти(Выборка.Номенклатура.ВидАлкогольнойПродукции) = Неопределено Тогда
			//ТекстОшибки = "Для номенклатуры " + Выборка.Номенклатура + " код:" + Выборка.Номенклатура.Код + " не заполнен Вид алкогольной продукции!";
			//ЗарегистрироватьОшибку(текОрганизация, Перечисления.ТоматоЭтапыОбменаЕГАИС.ФормированиеСписанияНекрепкогоАлкоголя, , ТекстОшибки); 
			Продолжить;
		КонецЕсли;
		
		НовСтрока					 = ТаблицаОтвета.Добавить();
		НовСтрока.Номенклатура		 = выборка.Номенклатура;
		НовСтрока.ЕдиницаИзмерения	 = ТарнаяЕдИзм;
		НовСтрока.Коэффициент		 = выборка.КоэффициентТарной;
		НовСтрока.Количество		 = выборка.Количество;
		НовСтрока.КоличествоОстатка	 = выборка.КоличествоОстаток;
		
	КонецЦикла;
	
	Возврат ТаблицаОтвета;

КонецФункции // ТаблицаПродажЗаВчера()

Функция ТаблицаОстатковЕГАИСПоПиву()

	КонецВчерашнегоДня = НачалоДня(ТекущаяДата())-1;
	
	ВидПродукцииПива = МассивВидовПродукцииПива();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстаткиИОбороты.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстаткиИОбороты.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстаткиИОбороты.КоличествоКонечныйОстаток КАК Количество,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстаткиИОбороты.Регистратор КАК Регистратор,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстаткиИОбороты.Период КАК Период,
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура,
	|	СоответствиеНоменклатурыЕГАИС.ЕдиницаИзмерения,
	|	ТранспортныеМодулиЕГАИС.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_Остатков
	|ИЗ
	|	РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.ОстаткиИОбороты(&КонецДня, &КонецДня, Регистратор, ДвиженияИГраницыПериода, АлкогольнаяПродукция.ВидПродукции В (&ВидПродукцииПива)) КАК ОстаткиАлкогольнойПродукцииЕГАИСОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО ОстаткиАлкогольнойПродукцииЕГАИСОстаткиИОбороты.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТранспортныеМодулиЕГАИС КАК ТранспортныеМодулиЕГАИС
	|		ПО ОстаткиАлкогольнойПродукцииЕГАИСОстаткиИОбороты.ОрганизацияЕГАИС.Код = ТранспортныеМодулиЕГАИС.ИдентификаторФСРАР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТоварноТранспортнаяНакладнаяЕГАИСТовары.Ссылка.Дата) КАК ДатаТТН,
	|	ТоварноТранспортнаяНакладнаяЕГАИСТовары.АлкогольнаяПродукция
	|ПОМЕСТИТЬ ВТ_ДатыТТН
	|ИЗ
	|	ВТ_Остатков КАК ВТ_Остатков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТоварноТранспортнаяНакладнаяЕГАИС.Товары КАК ТоварноТранспортнаяНакладнаяЕГАИСТовары
	|		ПО ВТ_Остатков.АлкогольнаяПродукция = ТоварноТранспортнаяНакладнаяЕГАИСТовары.АлкогольнаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварноТранспортнаяНакладнаяЕГАИСТовары.АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Остатков.ОрганизацияЕГАИС,
	|	ВТ_Остатков.АлкогольнаяПродукция,
	|	ВТ_Остатков.Количество,
	|	ВТ_Остатков.Регистратор,
	|	ВТ_Остатков.Период,
	|	ВТ_Остатков.Номенклатура,
	|	ВТ_Остатков.ЕдиницаИзмерения,
	|	ВТ_Остатков.Организация,
	|	ВТ_ДатыТТН.ДатаТТН КАК ДатаТТН
	|ИЗ
	|	ВТ_Остатков КАК ВТ_Остатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДатыТТН КАК ВТ_ДатыТТН
	|		ПО ВТ_Остатков.АлкогольнаяПродукция = ВТ_ДатыТТН.АлкогольнаяПродукция
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаТТН";
	
	Запрос.УстановитьПараметр("ВидПродукцииПива", ВидПродукцииПива);
	Запрос.УстановитьПараметр("КонецДня", КонецВчерашнегоДня);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаОтвета = РезультатЗапроса.Выгрузить();
	ТаблицаОтвета.Индексы.Добавить("АлкогольнаяПродукция");
	ТаблицаОтвета.Индексы.Добавить("Номенклатура");
	ТаблицаОтвета.Индексы.Добавить("ОрганизацияЕГАИС");
	ТаблицаОтвета.Индексы.Добавить("Организация");
	
	Возврат ТаблицаОтвета;
	
КонецФункции // ТаблицаОстатковЕГАИСПоПиву()

Функция ТаблицаОшибокЗаДату(Знач ДатаРегистрации = Неопределено)

	Если ДатаРегистрации = Неопределено Тогда
		ДатаРегистрации = ТекущаяДата();
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоматоОшибкиОбменаЕГАИС.ДатаРегистрации,
	|	ТоматоОшибкиОбменаЕГАИС.Организация,
	|	ТоматоОшибкиОбменаЕГАИС.ЭтапОбмена,
	|	ТоматоОшибкиОбменаЕГАИС.ВидОшибки,
	|	ТоматоОшибкиОбменаЕГАИС.ОписаниеОшибки,
	|	ТоматоОшибкиОбменаЕГАИС.Отправлена,
	|	ТоматоОшибкиОбменаЕГАИС.ИдентификаторЗапроса
	|ИЗ
	|	РегистрСведений.ТоматоОшибкиОбменаЕГАИС КАК ТоматоОшибкиОбменаЕГАИС
	|ГДЕ
	|	ТоматоОшибкиОбменаЕГАИС.ДатаРегистрации МЕЖДУ &ДатаРегистрацииНачалоДня И &ДатаРегистрацииКонецДня";
	
	Запрос.УстановитьПараметр("ДатаРегистрацииНачалоДня", НачалоДня(ДатаРегистрации));
	Запрос.УстановитьПараметр("ДатаРегистрацииКонецДня", КонецДня(ДатаРегистрации));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаОтвета = РезультатЗапроса.Выгрузить();
	ТаблицаОтвета.Индексы.Добавить("Организация");
	ТаблицаОтвета.Индексы.Добавить("ЭтапОбмена");
	ТаблицаОтвета.Индексы.Добавить("ВидОшибки");
	ТаблицаОтвета.Индексы.Добавить("ОписаниеОшибки");
	ТаблицаОтвета.Индексы.Добавить("Отправлена");
	
	Возврат ТаблицаОтвета;

КонецФункции // ТаблицаОшибокЗаДату()

// Функция перенесена из модуля формы документа списания
// Функция вычисляет нормативную сумму продажи по переданным параметрам в зависимости от настроек на уровне компании.
//
Функция НайтиСуммуПродажиЕГАИСДляНоменклатуры(ТекАлкоПродукция, ТекНоменклатура, ТекЕдиницаИзмерения, ТекКоличество, Объект) Экспорт
	
	Если НЕ обЗначениеНеЗаполнено(ТекАлкоПродукция) И (обЗначениеНеЗаполнено(ТекНоменклатура) ИЛИ обЗначениеНеЗаполнено(ТекЕдиницаИзмерения)) Тогда
		ТекНоменклатураСтруктура = ИнтеграцияЕГАИС.ПолучитьСоответствиеАлкоПродукции(ТекАлкоПродукция);
		ТекНоменклатура = ТекНоменклатураСтруктура.Номенклатура;
		ТекЕдиницаИзмерения = ТекНоменклатураСтруктура.ЕдиницаИзмерения;
	КонецЕсли;
	Если обЗначениеНеЗаполнено(ТекНоменклатура) ИЛИ обЗначениеНеЗаполнено(ТекЕдиницаИзмерения) Тогда
		Возврат 0;
	КонецЕсли;
	
	СпособПолученияНаценки	= обПраво("СписаниеЕГАИССпособПолученияНаценки");
	ТипЦенЗакупки			= обПраво("СписаниеЕГАИСТипЦенЗакупки");
	
	ЦенаПродажи = обПолучитьЦенуПоСсылке(ТипЦенЗакупки,ТекНоменклатура,Объект.МоментВремени(),,,,,ТекЕдиницаИзмерения,Объект.ПодразделениеКомпании,,Истина);
	ПроцентНаценки			= 0;
	Если СпособПолученияНаценки = Перечисления.СпособПолученияНаценкиСписаниеЕГАИС.НеИспользовать Тогда
		ПроцентНаценки		= 0;
	ИначеЕсли СпособПолученияНаценки = Перечисления.СпособПолученияНаценкиСписаниеЕГАИС.ИспользоватьФиксированноеЗначение Тогда
		ПроцентНаценки		= обПраво("СписаниеЕГАИСПроцентНаценки");
	ИначеЕсли СпособПолученияНаценки = Перечисления.СпособПолученияНаценкиСписаниеЕГАИС.ВычислятьПоДаннымИБ Тогда
		ПроцентНаценки = обПолучитьПроцентНаценки(ТекНоменклатура, Объект.ПодразделениеКомпании);
	КонецЕсли;
	ЦенаПродажи				= ЦенаПродажи+(ЦенаПродажи*ПроцентНаценки/100);
	
	//++ 2018-10-17 |  Хан Алексей Вячеславович | Задача ITIL № БФ-00584
	//СуммаПродажи			= ТекКоличество * ЦенаПродажи; // было
	ЦенаПродажи = Томато.ПолучитьКоличествоВУчетныхЕдиницах(ЦенаПродажи, ТекАлкоПродукция);
	//-- 2018-10-17 |  

	СуммаПродажи			= ТекКоличество * ЦенаПродажи;
	
	Возврат СуммаПродажи;
	
КонецФункции

Функция МассивВидовПродукцииПива()

	ВидПродукцииПива = Новый Массив;
	ВидПродукцииПива.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду(500));
	ВидПродукцииПива.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду(510));
	ВидПродукцииПива.Добавить(Справочники.ВидыАлкогольнойПродукции.НайтиПоКоду(520));
	
 	Возврат ВидПродукцииПива;
	
КонецФункции // МассивВидовПродукцииПива()

Функция СписокГруппПива()

	СписокОтвета = Новый СписокЗначений;
	СписокОтвета.Добавить(Справочники.Номенклатура.НайтиПоКоду("ЦБ000000036"));
	СписокОтвета.Добавить(Справочники.Номенклатура.НайтиПоКоду("ЦБ000000037"));
	СписокОтвета.Добавить(Справочники.Номенклатура.НайтиПоКоду("ЦБ000002455"));

	Возврат СписокОтвета;
	
КонецФункции // СписокГруппПива()
 
Процедура УстановитьДокументСписанияВРСКрепкогоАлкоголя(ДокументСписания)

	//ОБЯЗАТЕЛЬНО УДАЛИТЬ после написания и отладки кода
	#Если РакНаГореСвистнет Тогда
		ДокументСписания = документы.СписаниеТоваровЕГАИС.ПустаяСсылка();
	#КонецЕсли
	
	ТоварыСписания = ДокументСписания.Товары;
	МаркиСписания =  ДокументСписания.Марки;
	Для каждого СтрокаТовара Из ТоварыСписания Цикл
		
		ОтборМарок = Новый Структура;
		ОтборМарок.Вставить("ИдентификаторМарок", СтрокаТовара.ИдентификаторМарок);
		
		СтрокиМарокТовара = МаркиСписания.НайтиСтроки(ОтборМарок);
		
		Для каждого СтрокаМарок Из СтрокиМарокТовара Цикл
			АлкогольнаяПродукция = ИнтеграцияЕГАИС.ПолучитьКлассификаторАлкоПродукцииПоPDF417(СтрокаМарок.КодМарки);
			Если НЕ ЗначениеЗаполнено(АлкогольнаяПродукция) Тогда
				АлкогольнаяПродукция = СтрокаТовара.АлкогольнаяПродукция;
			КонецЕсли;	
			ЗаписатьКрепкийАлкоголь(ДокументСписания.Организация, АлкогольнаяПродукция, СтрокаМарок.КодМарки, ДокументСписания);
		КонецЦикла; 
	
	КонецЦикла; 

КонецПроцедуры

Процедура УдалитьСтарыеЗаписиТаблицыИстории(ЭтапОбменаЕГАИС)

	ДатаОтсчета = ДобавитьМесяц(НачалоДня(ТекущаяДата()), -2); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоматоИсторияОбменаЕГАИС.Период,
	|	ТоматоИсторияОбменаЕГАИС.Организация,
	|	ТоматоИсторияОбменаЕГАИС.ЭтапОбменаЕГАИС,
	|	ТоматоИсторияОбменаЕГАИС.Выполнен,
	|	ТоматоИсторияОбменаЕГАИС.ИдентификаторЗапроса
	|ИЗ
	|	РегистрСведений.ТоматоИсторияОбменаЕГАИС КАК ТоматоИсторияОбменаЕГАИС
	|ГДЕ
	|	ТоматоИсторияОбменаЕГАИС.ЭтапОбменаЕГАИС = &ЭтапОбменаЕГАИС
	|	И ТоматоИсторияОбменаЕГАИС.Период < &ДатаОтсчета";
	
	Запрос.УстановитьПараметр("ЭтапОбменаЕГАИС", ЭтапОбменаЕГАИС);
	Запрос.УстановитьПараметр("ДатаОтсчета", ДатаОтсчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаписьРС = РегистрыСведений.ТоматоИсторияОбменаЕГАИС.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьРС, ВыборкаДетальныеЗаписи);
		ЗаписьРС.Удалить();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


КонецПроцедуры

Процедура УдалитьСтарыеЗаписиКрепкогоАлкоголя()

	ДатаОтсчета = ДобавитьМесяц(НачалоДня(ТекущаяДата()), -2); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоматоСканированиеКрепкогоАлкоголя.Организация,
	|	ТоматоСканированиеКрепкогоАлкоголя.Классификатор,
	|	ТоматоСканированиеКрепкогоАлкоголя.Марка
	|ИЗ
	|	РегистрСведений.ТоматоСканированиеКрепкогоАлкоголя КАК ТоматоСканированиеКрепкогоАлкоголя
	|ГДЕ
	|	ТоматоСканированиеКрепкогоАлкоголя.ДатаСканирования < &ДатаОтсчета";
	
	Запрос.УстановитьПараметр("ДатаОтсчета", ДатаОтсчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		УдалитьКрепкийАлкоголь(ВыборкаДетальныеЗаписи.Организация, ВыборкаДетальныеЗаписи.Классификатор, ВыборкаДетальныеЗаписи.Марка);
	КонецЦикла;
	
КонецПроцедуры
 
Процедура ПроверитьНаКорректностьДокументыСписанияКрепкогоАлкоголя()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоматоСканированиеКрепкогоАлкоголя.Организация,
	|	ТоматоСканированиеКрепкогоАлкоголя.Классификатор,
	|	ТоматоСканированиеКрепкогоАлкоголя.Марка,
	|	ТоматоСканированиеКрепкогоАлкоголя.ДокументСписания,
	|	ТоматоСканированиеКрепкогоАлкоголя.ДатаСканирования
	|ПОМЕСТИТЬ ВТ_КрепкогоАлкоголя
	|ИЗ
	|	РегистрСведений.ТоматоСканированиеКрепкогоАлкоголя КАК ТоматоСканированиеКрепкогоАлкоголя
	|ГДЕ
	|	ТоматоСканированиеКрепкогоАлкоголя.ДокументСписания <> ЗНАЧЕНИЕ(Документ.СписаниеТоваровЕГАИС.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КрепкогоАлкоголя.ДокументСписания
	|ПОМЕСТИТЬ ВТ_ДокументовСписания
	|ИЗ
	|	ВТ_КрепкогоАлкоголя КАК ВТ_КрепкогоАлкоголя
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_КрепкогоАлкоголя.ДокументСписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписаниеТоваровЕГАИСМарки.Ссылка,
	|	СписаниеТоваровЕГАИСМарки.КодМарки
	|ПОМЕСТИТЬ ВТ_МарокДокументов
	|ИЗ
	|	Документ.СписаниеТоваровЕГАИС.Марки КАК СписаниеТоваровЕГАИСМарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДокументовСписания КАК ВТ_ДокументовСписания
	|		ПО СписаниеТоваровЕГАИСМарки.Ссылка = ВТ_ДокументовСписания.ДокументСписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КрепкогоАлкоголя.ДокументСписания КАК ДокументСписания,
	|	ВТ_КрепкогоАлкоголя.Марка,
	|	ВТ_МарокДокументов.КодМарки
	|ИЗ
	|	ВТ_КрепкогоАлкоголя КАК ВТ_КрепкогоАлкоголя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МарокДокументов КАК ВТ_МарокДокументов
	|		ПО ВТ_КрепкогоАлкоголя.ДокументСписания = ВТ_МарокДокументов.Ссылка
	|			И ВТ_КрепкогоАлкоголя.Марка = ВТ_МарокДокументов.КодМарки
	|ГДЕ
	|	(ВТ_КрепкогоАлкоголя.Марка ЕСТЬ NULL
	|			ИЛИ ВТ_МарокДокументов.КодМарки ЕСТЬ NULL)
	|ИТОГИ ПО
	|	ДокументСписания";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДокументовСписания = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументовСписания.Следующий() Цикл
		ВыборкаПоДокументуСписания = ВыборкаДокументовСписания.Выбрать();
		ЕстьОшибки = Ложь;
		Пока ВыборкаПоДокументуСписания.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоДокументуСписания.Марка) Тогда
				ОписаниеОшибки = "В документе " + ВыборкаДокументовСписания.ДокументСписания + " неотсканированная марка:" + ВыборкаПоДокументуСписания.КодМарки;
				ЗарегистрироватьОшибку(ВыборкаДокументовСписания.ДокументСписания.Организация, Перечисления.ТоматоЭтапыОбменаЕГАИС.ФормированиеСписанияКрепкогоАлкоголяАкт2, ,  ОписаниеОшибки);
				ЕстьОшибки = Истина;
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(ВыборкаПоДокументуСписания.КодМарки) Тогда
				ОписаниеОшибки = "В документе " + ВыборкаДокументовСписания.ДокументСписания + " отсутствует марка:" + ВыборкаПоДокументуСписания.Марка;
				ЗарегистрироватьОшибку(ВыборкаДокументовСписания.ДокументСписания.Организация, Перечисления.ТоматоЭтапыОбменаЕГАИС.ФормированиеСписанияКрепкогоАлкоголяАкт2, ,  ОписаниеОшибки);				
				ЕстьОшибки = Истина;
			КонецЕсли; 
		КонецЦикла; 
		//Если  Тогда
		//
		//	
		//
		//КонецЕсли; 
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


КонецПроцедуры

Функция ОстаткиЕГАИСДляКрепкогоАлкоголя(МассивОрганизаций)

	Перем ТаблицаОтвета;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиЕГАИС.Дата,
	|	ОстаткиЕГАИС.Организация,
	|	ОстаткиЕГАИС.Номер
	|ПОМЕСТИТЬ ВТ_ДляПоследнихДокументов
	|ИЗ
	|	Документ.ОстаткиЕГАИС КАК ОстаткиЕГАИС
	|ГДЕ
	|	ОстаткиЕГАИС.Организация В(&МассивОрганизаций)
	|	И ОстаткиЕГАИС.ХозОперация = ЗНАЧЕНИЕ(Справочник.ХозОперации.РегистрацияОстатковВТорговомЗалеЕГАИС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДляПоследнихДокументов.Организация,
	|	МАКСИМУМ(ВТ_ДляПоследнихДокументов.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТ_МаксимальныхДат
	|ИЗ
	|	ВТ_ДляПоследнихДокументов КАК ВТ_ДляПоследнихДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДляПоследнихДокументов.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДляПоследнихДокументов.Организация,
	|	МАКСИМУМ(ВТ_ДляПоследнихДокументов.Номер) КАК Номер,
	|	ВТ_ДляПоследнихДокументов.Дата
	|ПОМЕСТИТЬ ВТ_МаксимальныхНомеров
	|ИЗ
	|	ВТ_ДляПоследнихДокументов КАК ВТ_ДляПоследнихДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксимальныхДат КАК ВТ_МаксимальныхДат
	|		ПО ВТ_ДляПоследнихДокументов.Организация = ВТ_МаксимальныхДат.Организация
	|			И ВТ_ДляПоследнихДокументов.Дата = ВТ_МаксимальныхДат.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДляПоследнихДокументов.Организация,
	|	ВТ_ДляПоследнихДокументов.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Количество КАК КоличествоОстатка,
	|	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция,
	|	ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация КАК Организация,
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ.ОстаткиЕГАИС.ОстаткиПоДаннымЕГАИС КАК ОстаткиЕГАИСОстаткиПоДаннымЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксимальныхНомеров КАК ВТ_МаксимальныхНомеров
	|		ПО ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Организация = ВТ_МаксимальныхНомеров.Организация
	|			И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Дата = ВТ_МаксимальныхНомеров.Дата
	|			И ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.Ссылка.Номер = ВТ_МаксимальныхНомеров.Номер
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО ОстаткиЕГАИСОстаткиПоДаннымЕГАИС.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция";
	
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаОтвета = РезультатЗапроса.Выгрузить();
	ТаблицаОтвета.Индексы.Добавить("Номенклатура");
	ТаблицаОтвета.Индексы.Добавить("Организация");
	
	Возврат ТаблицаОтвета;
	
КонецФункции // ОстаткиЕГАИСДляКрепкогоАлкоголя()

Функция ТаблицаВычитания(ТаблицаОстатков, ТаблицаДокумента)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОстатков.КоличествоОстатка,
	|	ТаблицаОстатков.АлкогольнаяПродукция,
	|	ТаблицаОстатков.Организация,
	|	ТаблицаОстатков.Номенклатура
	|ПОМЕСТИТЬ ВТ_ТаблицыОстатков
	|ИЗ
	|	&ТаблицаОстатков КАК ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.АлкогольнаяПродукция,
	|	ТаблицаДокумента.Количество
	|ПОМЕСТИТЬ ВТ_ТаблицыДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицыОстатков.КоличествоОстатка - ЕСТЬNULL(ВТ_ТаблицыДокумента.Количество, 0) КАК КоличествоОстатка,
	|	ВТ_ТаблицыОстатков.АлкогольнаяПродукция,
	|	ВТ_ТаблицыОстатков.Организация,
	|	ВТ_ТаблицыОстатков.Номенклатура
	|ИЗ
	|	ВТ_ТаблицыОстатков КАК ВТ_ТаблицыОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицыДокумента КАК ВТ_ТаблицыДокумента
	|		ПО ВТ_ТаблицыОстатков.АлкогольнаяПродукция = ВТ_ТаблицыДокумента.АлкогольнаяПродукция
	|			И ВТ_ТаблицыОстатков.Организация = ВТ_ТаблицыДокумента.Организация
	|			И ВТ_ТаблицыОстатков.Номенклатура = ВТ_ТаблицыДокумента.Номенклатура";
	
	Запрос.УстановитьПараметр("ТаблицаОстатков",ТаблицаОстатков);
	Запрос.УстановитьПараметр("ТаблицаДокумента",ТаблицаДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаОтвета = РезультатЗапроса.Выгрузить();
	ТаблицаОтвета.Индексы.Добавить("АлкогольнаяПродукция");
	ТаблицаОтвета.Индексы.Добавить("Организация");
	ТаблицаОтвета.Индексы.Добавить("Номенклатура");

	Возврат ТаблицаОтвета;

	
	
КонецФункции // ТаблицаВычитания()

Функция ТаблицаИсключенийЕГАИС()
	
	Перем ТаблицаОтвет;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоматоНоменклатураИсключенияЕГАИС.Организация,
	|	ТоматоНоменклатураИсключенияЕГАИС.Номенклатура
	|ИЗ
	|	РегистрСведений.ТоматоНоменклатураИсключенияЕГАИС КАК ТоматоНоменклатураИсключенияЕГАИС";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаОтвет = РезультатЗапроса.Выгрузить();
	ТаблицаОтвет.Индексы.Добавить("Организация");
	ТаблицаОтвет.Индексы.Добавить("Номенклатура");

	Возврат ТаблицаОтвет;
	
КонецФункции

Процедура тм_РассылкаПоСписаниюЕГАИС(ДатаНачала = Неопределено, ДатаОкончания = Неопределено) Экспорт
	Если ДатаНачала = Неопределено и ДатаОкончания = Неопределено Тогда
		ДатаОкончания = НачалоДня(ТекущаяДата())-1;
		ДатаНачала = НачалоДня(ДатаОкончания); //3е суток
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СписаниеТоваровЕГАИС.Ссылка КАК Документ,
	               |	ТранспортныеМодулиЕГАИС.Ссылка КАК УТМ,
	               |	СписаниеТоваровЕГАИС.СтатусОбработкиТТН_ЕГАИС КАК Статус,
	               |	СписаниеТоваровЕГАИС.Организация КАК Организация
	               |ИЗ
	               |	Документ.СписаниеТоваровЕГАИС КАК СписаниеТоваровЕГАИС
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТранспортныеМодулиЕГАИС КАК ТранспортныеМодулиЕГАИС
	               |		ПО СписаниеТоваровЕГАИС.Организация = ТранспортныеМодулиЕГАИС.Организация
	               |ГДЕ
	               |	СписаниеТоваровЕГАИС.Дата МЕЖДУ &Дата1 И &Дата2
	               |	И НЕ СписаниеТоваровЕГАИС.ПометкаУдаления
	               |	И НЕ ТранспортныеМодулиЕГАИС.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СписаниеТоваровЕГАИС.Дата,
	               |	Организация
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Дата1",ДатаНачала);
	Запрос.УстановитьПараметр("Дата2",ДатаОкончания);
	СписокСтатусов = Новый СписокЗначений;
	Результат = Запрос.Выполнить().Выгрузить();
		
	МассивСтруктурСаппорт = Новый Массив;
	
	Для Каждого стр из Результат Цикл
		ДлинаИстории = СтрДлина(стр.Документ.История);
		СтрокаПоследнейЗаписиИстории = "";
		ЕстьОшибка = Ложь;
		Если ДлинаИстории > 0 Тогда
			
			СимволПереводаСтроки = Найти(стр.Документ.История, Символы.ПС);
			Если СимволПереводаСтроки > 0 Тогда
				СтрокаПоследнейЗаписиИстории = Прав(стр.Документ.История, ДлинаИстории - СимволПереводаСтроки);
				
				Если (Найти(СтрокаПоследнейЗаписиИстории, "Документ успешно принят") > 0 
					И (стр.Документ.СтатусОбработкиТТН_ЕГАИС = Перечисления.СтатусыОбработкиТТН_ЕГАИС.ЕГАИСЗарегистрировалаДокумент
					ИЛИ стр.Документ.СтатусОбработкиТТН_ЕГАИС = Перечисления.СтатусыОбработкиТТН_ЕГАИС.ПолученоПодтверждениеИзЕГАИС)) ИЛИ
					(Найти(СтрокаПоследнейЗаписиИстории, "Акт списания успешно проведен") > 0 
					И (стр.Документ.СтатусОбработкиТТН_ЕГАИС = Перечисления.СтатусыОбработкиТТН_ЕГАИС.ЕГАИСЗарегистрировалаДокумент
					ИЛИ стр.Документ.СтатусОбработкиТТН_ЕГАИС = Перечисления.СтатусыОбработкиТТН_ЕГАИС.ПолученоПодтверждениеИзЕГАИС)) Тогда
					Продолжить;
				Иначе
					ЕстьОшибка = ИСТИНА;	
					
				КонецЕсли;
			Иначе
				ЕстьОшибка = ИСТИНА;	
			КонецЕсли;
			
		Иначе	
			Если стр.Документ.СтатусОбработкиТТН_ЕГАИС = Перечисления.СтатусыОбработкиТТН_ЕГАИС.ЕГАИСЗарегистрировалаДокумент
				ИЛИ стр.Документ.СтатусОбработкиТТН_ЕГАИС = Перечисления.СтатусыОбработкиТТН_ЕГАИС.ПолученоПодтверждениеИзЕГАИС Тогда
				Продолжить;
			Иначе
				ЕстьОшибка = ИСТИНА;	
			КонецЕсли;
			
			
		КонецЕсли;
		Если ЕстьОшибка Тогда
			Если стр.Документ.СтатусОбработкиТТН_ЕГАИС = Перечисления.СтатусыОбработкиТТН_ЕГАИС.ГотовКОтправке И
				НЕ ЗначениеЗаполнено(СтрокаПоследнейЗаписиИстории) Тогда
				ДокументОбъект = стр.Документ.ПолучитьОбъект();
				ОписаниеОшибки = "";
				ИнтеграцияЕГАИС.ОтправитьАктСписания(ДокументОбъект, стр.УТМ, ОписаниеОшибки);
				Если ОписаниеОшибки = "" Тогда
					СтрокаПоследнейЗаписиИстории = "История пустая. Документ был повторно отправлен в ЕГАИС, без ошибок";
				Иначе
					СтрокаПоследнейЗаписиИстории = "История пустая. Попытка повторной отправки в ЕГАИС провалилась: " + ОписаниеОшибки;
				КонецЕсли;
			КонецЕсли;
			СтруктураСписания = Новый Структура;
			СтруктураСписания.Вставить("НомерДокумента", стр.Документ.Номер);
			СтруктураСписания.Вставить("ДатаДокумента", стр.Документ.Дата);
			СтруктураСписания.Вставить("Организация", стр.Документ.Организация);
			СтруктураСписания.Вставить("АктСписания", стр.Документ.ХозОперация);
			СтруктураСписания.Вставить("Статус", стр.Документ.СтатусОбработкиТТН_ЕГАИС);
			СтруктураСписания.Вставить("ПоследнийОтветВИстории", СтрокаПоследнейЗаписиИстории);
			МассивСтруктурСаппорт.Добавить(СтруктураСписания);
		КонецЕсли;	
	КонецЦикла;
	
	
	Если МассивСтруктурСаппорт.Количество() > 0 Тогда
		Получатели = Новый Массив;
		Получатели.Добавить("support@tomato-pizza.ru");
		СформироватьПисьмоКонтроляСписаний(МассивСтруктурСаппорт,ДатаНачала,ДатаОкончания,Получатели);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура тм_РассылкаПоПеремещениюЕГАИС(ДатаНачала = Неопределено, ДатаОкончания = Неопределено) Экспорт
	Если ДатаНачала = Неопределено и ДатаОкончания = Неопределено Тогда
		ДатаОкончания = НачалоДня(ТекущаяДата())-1;
		ДатаНачала = НачалоДня(ДатаОкончания)-259200; //3е суток
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПеремещениеТоваровЕГАИС.Ссылка КАК Документ,
	               |	ТранспортныеМодулиЕГАИС.Ссылка КАК УТМ,
	               |	ПеремещениеТоваровЕГАИС.Статус КАК Статус,
	               |	ПеремещениеТоваровЕГАИС.Организация КАК Организация
	               |ИЗ
	               |	Документ.ПеремещениеТоваровЕГАИС КАК ПеремещениеТоваровЕГАИС
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТранспортныеМодулиЕГАИС КАК ТранспортныеМодулиЕГАИС
	               |		ПО ПеремещениеТоваровЕГАИС.Организация = ТранспортныеМодулиЕГАИС.Организация
	               |ГДЕ
	               |	ПеремещениеТоваровЕГАИС.Дата МЕЖДУ &Дата1 И &Дата2
	               |	И НЕ ПеремещениеТоваровЕГАИС.ПометкаУдаления
	               |	И НЕ ТранспортныеМодулиЕГАИС.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПеремещениеТоваровЕГАИС.Дата,
	               |	Организация
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Дата1",ДатаНачала);
	Запрос.УстановитьПараметр("Дата2",ДатаОкончания);
	СписокСтатусов = Новый СписокЗначений;
	Результат = Запрос.Выполнить().Выгрузить();
		
	МассивСтруктурСаппорт = Новый Массив;
	
	Для Каждого стр из Результат Цикл
		ДлинаИстории = СтрДлина(стр.Документ.История);
		СтрокаПоследнейЗаписиИстории = "";
		ЕстьОшибка = Ложь;
		Если ДлинаИстории > 0 Тогда
			
			СимволПереводаСтроки = Найти(стр.Документ.История, Символы.ПС);
			Если СимволПереводаСтроки > 0 Тогда
				СтрокаПоследнейЗаписиИстории = Прав(стр.Документ.История, ДлинаИстории - СимволПереводаСтроки);
				
				Если (Найти(СтрокаПоследнейЗаписиИстории, "Акт передачи продукции в торговый зал") > 0 
					И (стр.Документ.Статус = Перечисления.СтатусыОбработкиТТН_ЕГАИС.ЕГАИСЗарегистрировалаДокумент
					ИЛИ стр.Документ.Статус = Перечисления.СтатусыОбработкиТТН_ЕГАИС.ПолученоПодтверждениеИзЕГАИС)) ИЛИ
					(Найти(СтрокаПоследнейЗаписиИстории, "Документ успешно принят") > 0 
					И (стр.Документ.Статус = Перечисления.СтатусыОбработкиТТН_ЕГАИС.ЕГАИСЗарегистрировалаДокумент
					ИЛИ стр.Документ.Статус = Перечисления.СтатусыОбработкиТТН_ЕГАИС.ПолученоПодтверждениеИзЕГАИС)) Тогда
					Продолжить;
				Иначе
					ЕстьОшибка = ИСТИНА;	
					
				КонецЕсли;
			Иначе
				ЕстьОшибка = ИСТИНА;	
			КонецЕсли;
			
		Иначе	
			Если стр.Документ.Статус = Перечисления.СтатусыОбработкиТТН_ЕГАИС.ЕГАИСЗарегистрировалаДокумент
				ИЛИ стр.Документ.Статус = Перечисления.СтатусыОбработкиТТН_ЕГАИС.ПолученоПодтверждениеИзЕГАИС Тогда
				Продолжить;
			Иначе
				ЕстьОшибка = ИСТИНА;	
			КонецЕсли;
			
			
		КонецЕсли;
		Если ЕстьОшибка Тогда
			Если стр.Документ.Статус = Перечисления.СтатусыОбработкиТТН_ЕГАИС.ГотовКОтправке И
				НЕ ЗначениеЗаполнено(СтрокаПоследнейЗаписиИстории) Тогда
				СтрокаПоследнейЗаписиИстории = "История пустая. Документ был повторно отправлен в ЕГАИС, без ошибок";
			КонецЕсли;
			Если стр.Документ.Статус = Перечисления.СтатусыОбработкиТТН_ЕГАИС.ГотовКОтправке И
				стр.Документ.Товары.Количество() = 0 Тогда
				СтрокаПоследнейЗаписиИстории = СтрокаПоследнейЗаписиИстории + Символы.ПС + "Пустая табличная часть."
			КонецЕсли;
			СтруктураСписания = Новый Структура;
			СтруктураСписания.Вставить("НомерДокумента", стр.Документ.Номер);
			СтруктураСписания.Вставить("ДатаДокумента", стр.Документ.Дата);
			СтруктураСписания.Вставить("Организация", стр.Документ.Организация);
			СтруктураСписания.Вставить("АктПеремещения", стр.Документ.ХозОперация);
			СтруктураСписания.Вставить("Статус", стр.Документ.Статус);
			СтруктураСписания.Вставить("ПоследнийОтветВИстории", СтрокаПоследнейЗаписиИстории);
			МассивСтруктурСаппорт.Добавить(СтруктураСписания);
		КонецЕсли;	
	КонецЦикла;
		
	
	Если МассивСтруктурСаппорт.Количество() > 0 Тогда
		Получатели = Новый Массив;
		Получатели.Добавить("support@tomato-pizza.ru");
		СформироватьПисьмоКонтроляПеремещения(МассивСтруктурСаппорт,ДатаНачала,ДатаОкончания,Получатели);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура СформироватьПисьмоКонтроляПеремещения(ПараметрыПисьма,ДатаНачала,ДатаОкончания, Получатели)
	РеквизитыПисьма = Новый Структура;
	РеквизитыПисьма.Вставить("Тема","Контроль перемещения ЕГАИС / Комбинат питания / "+Формат(ДатаНачала,"ДФ='дд МММ гггг ""г.""'")+" - "+Формат(ДатаОкончания,"ДФ='дд МММ гггг ""г.""'"));	
	ТекстСообщения = ""; 
	ТекстСообщения = ТекстСообщения + "<TABLE><TR></TR>";
	ТекстСообщения = ТекстСообщения + "<TR><h2>Контроль перемещения в торговый зал ЕГАИС за период: "+Формат(ДатаНачала,"ДФ='дд МММ гггг ""г.""'")+" - "+Формат(ДатаОкончания,"ДФ='дд МММ гггг ""г.""'")+"</h2></TR>";

	ТекстСообщения = ТекстСообщения +"<TR> </TR>";
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";
	ТекстСообщения = ТекстСообщения + "<TR>Необходимо проверить документы перемещения:</TR>";
	ТекстСообщения = ТекстСообщения + "<TABLE BORDER=1><TR><TD><h4>Дата</h4></TD><TD><h4>Акт перемещения</h4></TD><TD><h4>Организация</h4></TD><TD><h4>Код документа</h4></TD><TD width=300><h4>Статус документа</h4></TD><TD><h4>Последний ответ ЕГАИС</h4></TD></TR>";
	Для каждого стр Из ПараметрыПисьма Цикл
		ТекстСообщения = ТекстСообщения + "<TR><TD>"+стр.ДатаДокумента+"</TD><TD>"+стр.АктПеремещения+"</TD><TD>"+стр.Организация+"</TD><TD>"+стр.НомерДокумента+"</TD><TD width=300 align = right><h4>"+стр.Статус+"</h4></TD><TD>"+стр.ПоследнийОтветВИстории+"</TD></TR>";
	КонецЦикла;
	ТекстСообщения = ТекстСообщения+ "</TABLE>";
	ТекстСообщения = ТекстСообщения+ "</TABLE>";
	
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";
	
	
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";			
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";			
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";			
	ТекстСообщения = ТекстСообщения + "<TR> ---- </TR>";
	ТекстСообщения = ТекстСообщения + "<TR><i>Заявка</TR>";
	ТекстСообщения = ТекстСообщения + "<TR><i>сформированна автоматически</TR>";
	ТекстСообщения = ТекстСообщения + "<TR><i> 1С ""Комбинат питания"" </i></TR>";
	ТекстСообщения = ТекстСообщения+ "</TABLE>";
	
	РеквизитыПисьма.Вставить("СводнаяТаблица",ТекстСообщения);
	РеквизитыПисьма.Вставить("ИмяОтправителя","Rarus");
	РеквизитыПисьма.Вставить("Вложения",Новый Массив);
	
	РеквизитыПисьма.Вставить("МассивПолучателей",Получатели);
	Томато.АвтозаказОтправитьПочту(РеквизитыПисьма);	
КонецПроцедуры

Процедура СформироватьПисьмоКонтроляСписаний(ПараметрыПисьма,ДатаНачала,ДатаОкончания, Получатели)
	РеквизитыПисьма = Новый Структура;
	РеквизитыПисьма.Вставить("Тема","Контроль списаний ЕГАИС / Комбинат питания / "+Формат(ДатаНачала,"ДФ='дд МММ гггг ""г.""'")+" - "+Формат(ДатаОкончания,"ДФ='дд МММ гггг ""г.""'"));	
	ТекстСообщения = ""; 
	ТекстСообщения = ТекстСообщения + "<TABLE><TR></TR>";
	ТекстСообщения = ТекстСообщения + "<TR><h2>Контроль списаний ЕГАИС за период: "+Формат(ДатаНачала,"ДФ='дд МММ гггг ""г.""'")+" - "+Формат(ДатаОкончания,"ДФ='дд МММ гггг ""г.""'")+"</h2></TR>";

	ТекстСообщения = ТекстСообщения +"<TR> </TR>";
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";
	ТекстСообщения = ТекстСообщения + "<TR>Необходимо проверить документы списания:</TR>";
	ТекстСообщения = ТекстСообщения + "<TABLE BORDER=1><TR><TD><h4>Дата</h4></TD><TD><h4>Акт списания</h4></TD><TD><h4>Организация</h4></TD><TD><h4>Код документа</h4></TD><TD width=300><h4>Статус документа</h4></TD><TD><h4>Последний ответ ЕГАИС</h4></TD></TR>";
	Для каждого стр Из ПараметрыПисьма Цикл
		ТекстСообщения = ТекстСообщения + "<TR><TD>"+стр.ДатаДокумента+"</TD><TD>"+стр.АктСписания+"</TD><TD>"+стр.Организация+"</TD><TD>"+стр.НомерДокумента+"</TD><TD width=300 align = right><h4>"+стр.Статус+"</h4></TD><TD>"+стр.ПоследнийОтветВИстории+"</TD></TR>";
	КонецЦикла;
	ТекстСообщения = ТекстСообщения+ "</TABLE>";
	ТекстСообщения = ТекстСообщения+ "</TABLE>";
	
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";
	
	
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";			
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";			
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";			
	ТекстСообщения = ТекстСообщения + "<TR> ---- </TR>";
	ТекстСообщения = ТекстСообщения + "<TR><i>Заявка </TR>";
	ТекстСообщения = ТекстСообщения + "<TR><i>сформированна автоматически </TR>";
	ТекстСообщения = ТекстСообщения + "<TR><i> 1С ""Комбинат питания"" </i></TR>";
	ТекстСообщения = ТекстСообщения+ "</TABLE>";
	
	РеквизитыПисьма.Вставить("СводнаяТаблица",ТекстСообщения);
	РеквизитыПисьма.Вставить("ИмяОтправителя","Rarus");
	РеквизитыПисьма.Вставить("Вложения",Новый Массив);
	
	РеквизитыПисьма.Вставить("МассивПолучателей",Получатели);
	Томато.АвтозаказОтправитьПочту(РеквизитыПисьма);	
КонецПроцедуры

Процедура тм_ВечерняяПроверкаОстатковЕГАИС(ДатаНачала = Неопределено, ДатаОкончания = Неопределено) Экспорт
	Если ДатаНачала = Неопределено и ДатаОкончания = Неопределено Тогда
		ДатаОкончания = НачалоДня(ТекущаяДата())-1;
		ДатаНачала = НачалоДня(ДатаОкончания); 
		ДатаНачала = Дата("20220301000000");
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	ТаблицаХозов = Новый ТаблицаЗначений;
	ТаблицаХозов.Колонки.Добавить("Хозы", Новый ОписаниеТипов("СправочникСсылка.ХозОперации"));
	СтрокаТорговогоЗала = ТаблицаХозов.Добавить();
	СтрокаТорговогоЗала.Хозы = Справочники.ХозОперации.РегистрацияОстатковВТорговомЗалеЕГАИС;
	СтрокаСклада = ТаблицаХозов.Добавить();
	СтрокаСклада.Хозы = Справочники.ХозОперации.РегистрацияОстатковНаСкладеЕГАИС;
	
	Запрос.УстановитьПараметр("ХозОперации", ТаблицаХозов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозОперации.Хозы
	               |ПОМЕСТИТЬ ВТХозы
	               |ИЗ
	               |	&ХозОперации КАК ХозОперации
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&ДатаНачала КАК Дата,
	               |	ТранспортныеМодулиЕГАИС.Ссылка,
	               |	ВТХозы.Хозы
	               |ПОМЕСТИТЬ ВтДниИТранспортныеМодули
	               |ИЗ
	               |	Справочник.ТранспортныеМодулиЕГАИС КАК ТранспортныеМодулиЕГАИС,
	               |	ВТХозы КАК ВТХозы
	               |ГДЕ
	               |	НЕ ТранспортныеМодулиЕГАИС.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВтДниИТранспортныеМодули.Дата,
	               |	ВтДниИТранспортныеМодули.Ссылка.Наименование,
	               |	ВтДниИТранспортныеМодули.Хозы,
	               |	ВЫБОР
	               |		КОГДА ОстаткиЕГАИС.Ссылка ЕСТЬ NULL
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ОтсутствуетДокумент
	               |ПОМЕСТИТЬ ВТИтоги
	               |ИЗ
	               |	ВтДниИТранспортныеМодули КАК ВтДниИТранспортныеМодули
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОстаткиЕГАИС КАК ОстаткиЕГАИС
	               |		ПО ВтДниИТранспортныеМодули.Ссылка.ИдентификаторФСРАР = ОстаткиЕГАИС.ОрганизацияЕГАИС.Код
	               |			И (НАЧАЛОПЕРИОДА(ВтДниИТранспортныеМодули.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(ОстаткиЕГАИС.Дата, ДЕНЬ))
	               |			И ВтДниИТранспортныеМодули.Хозы = ОстаткиЕГАИС.ХозОперация
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ОстаткиЕГАИС.ПометкаУдаления ЕСТЬ NULL
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ НЕ ОстаткиЕГАИС.ПометкаУдаления
	               |		КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТИтоги.Дата КАК Дата,
	               |	ВТИтоги.СсылкаНаименование КАК Организация,
	               |	ВТИтоги.Хозы КАК Хозы
	               |ИЗ
	               |	ВТИтоги КАК ВТИтоги
	               |ГДЕ
	               |	ВТИтоги.ОтсутствуетДокумент
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата,
	               |	СсылкаНаименование,
	               |	Хозы";
	Результат = Запрос.Выполнить().Выгрузить();
	Получатели = Новый Массив;
	Получатели.Добавить("chupetkiniv@tomato-pizza.ru");
	
	СформироватьПисьмоКонтроляОстатков(Результат, ДатаНачала, ДатаОкончания, Получатели);
	
КонецПроцедуры

Процедура СформироватьПисьмоКонтроляОстатков(ПараметрыПисьма,ДатаНачала,ДатаОкончания, Получатели)
	РеквизитыПисьма = Новый Структура;
	РеквизитыПисьма.Вставить("Тема","Контроль остатков ЕГАИС / Комбинат питания / "+Формат(ДатаНачала,"ДФ='дд МММ гггг ""г.""'")+" - "+Формат(ДатаОкончания,"ДФ='дд МММ гггг ""г.""'"));	
	ТекстСообщения = ""; 
	ТекстСообщения = ТекстСообщения + "<TABLE><TR></TR>";
	ТекстСообщения = ТекстСообщения + "<TR><h2>Контроль остатков ЕГАИС за период: "+Формат(ДатаНачала,"ДФ='дд МММ гггг ""г.""'")+" - "+Формат(ДатаОкончания,"ДФ='дд МММ гггг ""г.""'")+"</h2></TR>";

	ТекстСообщения = ТекстСообщения +"<TR> </TR>";
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";
	ТекстСообщения = ТекстСообщения + "<TR>Внимание, по текущим организация не создались документы остатков, необходимо запросить их вручную:</TR>";
	ТекстСообщения = ТекстСообщения + "<TABLE BORDER=1><TR><TD><h4>Дата</h4></TD><TD><h4>Организация</h4></TD><TD width=300><h4>Остатки по регистру</h4></TD></TR>";
	Для каждого стр Из ПараметрыПисьма Цикл
		ТекстСообщения = ТекстСообщения + "<TR><TD>"+Формат(стр.Дата, "ДЛФ=Д")+"</TD><TD>"+стр.Организация+"</TD><TD width=300 align = left><h4>"+стр.Хозы+"</h4></TD></TR>";
	КонецЦикла;
	ТекстСообщения = ТекстСообщения+ "</TABLE>";
	ТекстСообщения = ТекстСообщения+ "</TABLE>";
	
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";
	
	
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";			
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";			
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";
	ТекстСообщения = ТекстСообщения +"<TR> </TR>";			
	ТекстСообщения = ТекстСообщения + "<TR> ---- </TR>";
	ТекстСообщения = ТекстСообщения + "<TR><i>Заявка </TR>";
	ТекстСообщения = ТекстСообщения + "<TR><i>сформированна автоматически </TR>";
	ТекстСообщения = ТекстСообщения + "<TR><i> 1С ""Комбинат питания"" </i></TR>";
	ТекстСообщения = ТекстСообщения+ "</TABLE>";
	
	РеквизитыПисьма.Вставить("СводнаяТаблица",ТекстСообщения);
	РеквизитыПисьма.Вставить("ИмяОтправителя","Rarus");
	РеквизитыПисьма.Вставить("Вложения",Новый Массив);
	
	РеквизитыПисьма.Вставить("МассивПолучателей",Получатели);
	Томато.АвтозаказОтправитьПочту(РеквизитыПисьма);	
КонецПроцедуры


#КонецОбласти 